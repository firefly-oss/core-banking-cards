openapi: 3.0.1
info:
  title: core-banking-cards
  description: Banking Cards Core Application
  contact:
    name: Firefly Software Solutions Inc
    email: dev@getfirefly.io
  version: 1.0.0
servers:
  - url: http://core.catalis.vc/cards
    description: Development Environment
  - url: /
    description: Local Development Environment
tags:
  - name: Cards
    description: APIs for managing card records within the banking system
  - name: Card Programs
    description: APIs for managing card program records
  - name: Physical Cards
    description: APIs for managing physical card records linked to a specific card
  - name: Card Providers
    description: APIs for managing provider records associated with a specific card
  - name: Card Security
    description: APIs for managing security settings associated with a specific card
  - name: Issuers
    description: APIs for managing card issuer records
  - name: Card Terminals
    description: APIs for managing card terminal records
  - name: Card Limits
    description: APIs for managing limit records associated with a specific card
  - name: Card Transactions
    description: APIs for managing transaction records associated with a specific card
  - name: Card Gateways
    description: APIs for managing card gateway records
  - name: Card Networks
    description: APIs for managing card network records (Visa, Mastercard, etc.)
  - name: Card Interests
    description: APIs for managing interest records associated with a specific card
  - name: Card Payments
    description: APIs for managing payment records associated with a specific card
  - name: Card Promotions
    description: APIs for managing promotion records associated with a specific card
  - name: BINs
    description: APIs for managing Bank Identification Number (BIN) records
  - name: Card Balances
    description: APIs for managing balance records associated with a specific card
  - name: Card Activities
    description: APIs for managing activity records associated with a specific card
  - name: Card Enrollments
    description: APIs for managing enrollment records associated with a specific card
  - name: Virtual Cards
    description: APIs for managing virtual card records linked to a specific card
  - name: Card Disputes
    description: APIs for managing dispute records associated with a specific card
  - name: Card Configurations
    description: APIs for managing configuration records associated with a specific card
  - name: Card Acquirers
    description: APIs for managing card acquirer records
  - name: Card Merchants
    description: APIs for managing card merchant records
paths:
  /api/v1/terminals/{terminalId}:
    get:
      tags:
        - Card Terminals
      summary: Get Card Terminal by ID
      description: |-
        Retrieve a specific card terminal record by its unique identifier.

        This endpoint returns detailed information about a specific payment terminal, including its configuration, capabilities, location, and status. This information is useful for terminal management, troubleshooting, and transaction analysis.

        The terminal ID is a unique identifier assigned to each terminal in the system.
      operationId: getTerminal
      parameters:
        - name: terminalId
          in: path
          description: Unique identifier of the card terminal
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card terminal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTerminalDTO'
        '404':
          description: Card terminal not found
    put:
      tags:
        - Card Terminals
      summary: Update Card Terminal
      description: |-
        Update an existing card terminal record by its unique identifier.

        This endpoint allows modification of terminal attributes such as location, status, capabilities, and associated merchant or processor. The core terminal identity (reference and serial number) should generally remain stable.

        Updates to terminal configuration may affect transaction processing, so changes should be carefully validated. Terminal software and firmware versions can also be updated through this endpoint.
      operationId: updateTerminal
      parameters:
        - name: terminalId
          in: path
          description: Unique identifier of the card terminal to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTerminalDTO'
        required: true
      responses:
        '200':
          description: Card terminal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTerminalDTO'
        '400':
          description: Invalid card terminal data provided
        '404':
          description: Card terminal not found
    delete:
      tags:
        - Card Terminals
      summary: Delete Card Terminal
      description: |-
        Delete a card terminal record by its unique identifier.

        This endpoint permanently removes a terminal from the system. This operation should be used with caution, as it may impact transaction history and reporting.

        Before deletion, ensure that the terminal is no longer in use and has been properly decommissioned. In many cases, deactivating a terminal rather than deleting it is the preferred approach to maintain historical records.
      operationId: deleteTerminal
      parameters:
        - name: terminalId
          in: path
          description: Unique identifier of the card terminal to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card terminal deleted successfully
        '404':
          description: Card terminal not found
  /api/v1/programs/{programId}:
    get:
      tags:
        - Card Programs
      summary: Get Card Program by ID
      description: |-
        Retrieve a specific card program record by its unique identifier.

        ## Description
        This endpoint returns detailed information about a card program, including its configuration, limits, supported features, and associations with issuers, BINs, and card networks.

        ## Response Details
        The response includes comprehensive information about the requested card program:
        * Program identification (ID, name, code)
        * Associated entities (issuer, BIN, card type, network)
        * Validity period (start and end dates)
        * Default limits and parameters
        * Supported features and capabilities
        * Activation status

        ## Path Parameters
        * `programId` - The unique identifier of the card program in the system

        ## Common Use Cases
        * Retrieving program details before card issuance
        * Checking program configuration during system setup
        * Verifying program features and limits
      operationId: getProgram
      parameters:
        - name: programId
          in: path
          description: Unique identifier of the card program
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProgramDTO'
        '404':
          description: Card program not found
    put:
      tags:
        - Card Programs
      summary: Update Card Program
      description: |-
        Update an existing card program record by its unique identifier.

        ## Description
        This endpoint allows modification of card program attributes such as limits, supported features, and activation status. It enables financial institutions to adjust program parameters based on business needs, market conditions, or regulatory requirements.

        ## Updatable Fields
        * `programName` - Name of the card program
        * `defaultDesignId` - Default card design template
        * `endDate` - When the program expires
        * `isActive` - Whether the program is active
        * `maxCardsPerParty` - Maximum cards allowed per party
        * `defaultDailyLimit` - Default daily transaction limit
        * `defaultMonthlyLimit` - Default monthly transaction limit
        * `defaultCreditLimit` - Default credit limit (for credit cards)
        * `defaultCardValidityYears` - Default card validity period in years
        * Feature flags (supports* fields) - Capabilities of cards in this program

        ## Important Note
        ⚠️ Changes to a card program may affect new cards issued under the program, but typically do not automatically apply to existing cards unless explicitly configured. Consider implementing a separate process to update existing cards if needed.

        ## Path Parameters
        * `programId` - The unique identifier of the card program to update

        ## Common Use Cases
        * Adjusting program limits based on risk assessment
        * Adding or removing program features
        * Extending or shortening program validity period
        * Activating or deactivating a program
      operationId: updateProgram
      parameters:
        - name: programId
          in: path
          description: Unique identifier of the card program to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardProgramDTO'
        required: true
      responses:
        '200':
          description: Card program updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProgramDTO'
        '400':
          description: Invalid card program data provided
        '404':
          description: Card program not found
    delete:
      tags:
        - Card Programs
      summary: Delete Card Program
      description: |-
        Delete a card program record by its unique identifier.

        ## Description
        This endpoint permanently removes a card program from the system. It completely erases the program record from the database.

        ## Warning
        ⚠️ **This operation should be used with extreme caution!**

        Deleting a card program has several important implications:
        * New cards cannot be issued under this program
        * Existing cards issued under this program may lose their program reference
        * Program-specific rules and configurations will no longer be available
        * Historical data and reporting may be affected

        ## Recommended Alternative
        In most production scenarios, card programs should be **deactivated** rather than deleted if they are no longer in use. This preserves the program record for historical purposes while preventing new cards from being issued under this program.

        ## Appropriate Use Cases
        Card program deletion should be limited to:
        * Test programs in non-production environments
        * Programs created in error that have never been used for card issuance
        * Programs that need to be completely removed due to specific regulatory requirements

        ## Path Parameters
        * `programId` - The unique identifier of the card program to delete

        ## Required Permissions
        This operation typically requires elevated administrative privileges.
      operationId: deleteProgram
      parameters:
        - name: programId
          in: path
          description: Unique identifier of the card program to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card program deleted successfully
        '404':
          description: Card program not found
  /api/v1/networks/{networkId}:
    get:
      tags:
        - Card Networks
      summary: Get Card Network by ID
      description: |-
        Retrieve a specific card network record by its unique identifier.

        This endpoint returns detailed information about a specific card network, including its configuration, supported features, and integration details. This information is used when setting up card programs and processing transactions.

        The network ID is a unique identifier assigned to each card network in the system.
      operationId: getNetwork
      parameters:
        - name: networkId
          in: path
          description: Unique identifier of the card network
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardNetworkDTO'
        '404':
          description: Card network not found
    put:
      tags:
        - Card Networks
      summary: Update Card Network
      description: |-
        Update an existing card network record by its unique identifier.

        This endpoint allows modification of card network attributes such as contact information, API endpoints, and supported features. The core network identity (name and code) should generally remain stable as they are used in many related records.

        Updates to network configuration may affect transaction processing, so changes should be carefully tested before being applied to production environments.
      operationId: updateNetwork
      parameters:
        - name: networkId
          in: path
          description: Unique identifier of the card network to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardNetworkDTO'
        required: true
      responses:
        '200':
          description: Card network updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardNetworkDTO'
        '400':
          description: Invalid card network data provided
        '404':
          description: Card network not found
    delete:
      tags:
        - Card Networks
      summary: Delete Card Network
      description: |-
        Delete a card network record by its unique identifier.

        This endpoint permanently removes a card network from the system. This operation should be used with extreme caution, as it may impact existing cards, programs, and transactions associated with this network.

        Before deletion, ensure that no active cards or programs are using this network. In most cases, deactivating a network rather than deleting it is the safer approach.
      operationId: deleteNetwork
      parameters:
        - name: networkId
          in: path
          description: Unique identifier of the card network to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card network deleted successfully
        '404':
          description: Card network not found
  /api/v1/merchants/{merchantId}:
    get:
      tags:
        - Card Merchants
      summary: Get Card Merchant by ID
      description: |-
        Retrieve a specific card merchant record by its unique identifier.

        ## Description
        This endpoint returns comprehensive information about a merchant, including its business details, category codes, risk assessment, and settlement information. This data is useful for transaction analysis and merchant management.

        ## Response Details
        The response includes detailed information about the requested merchant:
        * Merchant identification (ID, reference, name)
        * Business details (legal name, category, type)
        * Contact information (address, phone, email)
        * Payment capabilities (supported networks, payment methods)
        * Risk assessment (risk rating, score, fraud indicators)
        * Settlement information (bank details, frequency)
        * Status and activation details

        ## Path Parameters
        * `merchantId` - The unique identifier of the merchant in the system

        ## Common Use Cases
        * Retrieving merchant details for transaction verification
        * Checking merchant status during payment processing
        * Verifying merchant risk rating for fraud prevention
        * Accessing settlement information for financial reconciliation
      operationId: getMerchant
      parameters:
        - name: merchantId
          in: path
          description: Unique identifier of the card merchant
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card merchant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardMerchantDTO'
        '404':
          description: Card merchant not found
    put:
      tags:
        - Card Merchants
      summary: Update Card Merchant
      description: |-
        Update an existing card merchant record by its unique identifier.

        ## Description
        This endpoint allows modification of merchant attributes such as contact information, business details, risk ratings, and settlement information. Keeping merchant information up-to-date is essential for accurate transaction processing and reporting.

        ## Updatable Fields
        * `merchantName` - Display name of the merchant
        * `merchantDisplayName` - Name shown on statements
        * `merchantDescription` - Description of the business
        * `merchantStatus` - Current status (ACTIVE, SUSPENDED, etc.)
        * `isActive` - Whether the merchant is active
        * Contact information (address, phone, email)
        * Business details (website, logo URL)
        * Payment capabilities (supported networks, payment methods)
        * Risk assessment (risk rating, score)
        * Settlement information (bank details, frequency)

        ## Important Note
        ⚠️ Some core merchant attributes should generally remain stable:
        * Merchant reference
        * Merchant legal name
        * Merchant category code
        * Tax ID and registration number

        Changes to these core attributes may require additional verification or approval processes.

        ## Path Parameters
        * `merchantId` - The unique identifier of the merchant to update

        ## Common Use Cases
        * Updating merchant contact information
        * Changing merchant status (activating, suspending)
        * Updating risk assessment after periodic review
        * Modifying settlement details after bank account changes
      operationId: updateMerchant
      parameters:
        - name: merchantId
          in: path
          description: Unique identifier of the card merchant to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardMerchantDTO'
        required: true
      responses:
        '200':
          description: Card merchant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardMerchantDTO'
        '400':
          description: Invalid card merchant data provided
        '404':
          description: Card merchant not found
    delete:
      tags:
        - Card Merchants
      summary: Delete Card Merchant
      description: |-
        Delete a card merchant record by its unique identifier.

        ## Description
        This endpoint permanently removes a merchant from the system. It completely erases the merchant record from the database.

        ## Warning
        ⚠️ **This operation should be used with extreme caution!**

        Deleting a merchant has several important implications:
        * All transaction history associated with this merchant will be orphaned
        * Reporting and analytics will be affected
        * Chargeback and dispute processing may be compromised
        * Regulatory compliance and audit trails may be impacted

        ## Recommended Alternative
        In most production scenarios, merchants should be **deactivated** rather than deleted if they are no longer active. This preserves the merchant record for historical purposes while preventing new transactions from being processed for this merchant.

        To deactivate a merchant, use the Update endpoint to set:
        * `merchantStatus` to `INACTIVE`
        * `isActive` to `false`

        ## Appropriate Use Cases
        Merchant deletion should be limited to:
        * Test merchants in non-production environments
        * Merchants created in error that have never processed transactions
        * Specific regulatory requirements that mandate complete removal

        ## Path Parameters
        * `merchantId` - The unique identifier of the merchant to delete

        ## Required Permissions
        This operation typically requires elevated administrative privileges.
      operationId: deleteMerchant
      parameters:
        - name: merchantId
          in: path
          description: Unique identifier of the card merchant to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card merchant deleted successfully
        '404':
          description: Card merchant not found
  /api/v1/issuers/{issuerId}:
    get:
      tags:
        - Issuers
      summary: Get Issuer by ID
      description: |-
        Retrieve a specific issuer record by its unique identifier.

        This endpoint returns detailed information about a specific card issuer, including its configuration, supported card types, contact information, and regulatory details. This information is used when setting up card programs and processing transactions.

        The issuer ID is a unique identifier assigned to each card issuer in the system.
      operationId: getIssuer
      parameters:
        - name: issuerId
          in: path
          description: Unique identifier of the issuer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerDTO'
        '404':
          description: Issuer not found
    put:
      tags:
        - Issuers
      summary: Update Issuer
      description: |-
        Update an existing issuer record by its unique identifier.

        This endpoint allows modification of issuer attributes such as contact information, supported card types, and regulatory details. The core issuer identity (name and code) should generally remain stable.

        Updates to issuer configuration may affect card issuance and transaction processing, so changes should be carefully validated before being applied to production environments.
      operationId: updateIssuer
      parameters:
        - name: issuerId
          in: path
          description: Unique identifier of the issuer to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerDTO'
        required: true
      responses:
        '200':
          description: Issuer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerDTO'
        '400':
          description: Invalid issuer data provided
        '404':
          description: Issuer not found
    delete:
      tags:
        - Issuers
      summary: Delete Issuer
      description: |-
        Delete an issuer record by its unique identifier.

        This endpoint permanently removes a card issuer from the system. This operation should be used with extreme caution, as it may impact existing cards, programs, and transactions associated with this issuer.

        Before deletion, ensure that no active cards or programs are using this issuer. In most cases, deactivating an issuer rather than deleting it is the safer approach to maintain historical records.
      operationId: deleteIssuer
      parameters:
        - name: issuerId
          in: path
          description: Unique identifier of the issuer to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Issuer deleted successfully
        '404':
          description: Issuer not found
  /api/v1/gateways/{gatewayId}:
    get:
      tags:
        - Card Gateways
      summary: Get Card Gateway by ID
      description: |-
        Retrieve a specific card gateway record by its unique identifier.

        This endpoint returns detailed information about a specific payment gateway, including its configuration, integration details, supported features, and status. This information is used when processing transactions and configuring merchant integrations.

        The gateway ID is a unique identifier assigned to each payment gateway in the system.
      operationId: getGateway
      parameters:
        - name: gatewayId
          in: path
          description: Unique identifier of the card gateway
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardGatewayDTO'
        '404':
          description: Card gateway not found
    put:
      tags:
        - Card Gateways
      summary: Update Card Gateway
      description: |-
        Update an existing card gateway record by its unique identifier.

        This endpoint allows modification of gateway attributes such as endpoint URLs, authentication credentials, supported features, and configuration parameters. The core gateway identity (name and provider) should generally remain stable.

        Updates to gateway configuration may affect transaction processing, so changes should be carefully tested in a staging environment before being applied to production.
      operationId: updateGateway
      parameters:
        - name: gatewayId
          in: path
          description: Unique identifier of the card gateway to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardGatewayDTO'
        required: true
      responses:
        '200':
          description: Card gateway updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardGatewayDTO'
        '400':
          description: Invalid card gateway data provided
        '404':
          description: Card gateway not found
    delete:
      tags:
        - Card Gateways
      summary: Delete Card Gateway
      description: |-
        Delete a card gateway record by its unique identifier.

        This endpoint permanently removes a payment gateway from the system. This operation should be used with extreme caution, as it may impact transaction processing for merchants using this gateway.

        Before deletion, ensure that no active merchants or terminals are configured to use this gateway. In most cases, deactivating a gateway rather than deleting it is the safer approach.
      operationId: deleteGateway
      parameters:
        - name: gatewayId
          in: path
          description: Unique identifier of the card gateway to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card gateway deleted successfully
        '404':
          description: Card gateway not found
  /api/v1/cards/{cardId}/virtual-cards/{virtualCardId}:
    get:
      tags:
        - Virtual Cards
      summary: Get Virtual Card by ID
      description: Retrieve a specific virtual card record by its unique identifier, ensuring it belongs to the specified card.
      operationId: getVirtualCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: virtualCardId
          in: path
          description: Unique identifier of the virtual card record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the virtual card record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCardDTO'
        '404':
          description: Virtual card record not found
    put:
      tags:
        - Virtual Cards
      summary: Update Virtual Card
      description: Update an existing virtual card record associated with the specified card.
      operationId: updateVirtualCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: virtualCardId
          in: path
          description: Unique identifier of the virtual card record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualCardDTO'
        required: true
      responses:
        '200':
          description: Virtual card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCardDTO'
        '404':
          description: Virtual card record not found
    delete:
      tags:
        - Virtual Cards
      summary: Delete Virtual Card
      description: Remove an existing virtual card record by its unique identifier.
      operationId: deleteVirtualCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: virtualCardId
          in: path
          description: Unique identifier of the virtual card record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Virtual card record deleted successfully
        '404':
          description: Virtual card record not found
  /api/v1/cards/{cardId}/transactions/{transactionId}:
    get:
      tags:
        - Card Transactions
      summary: Get Card Transaction by ID
      description: |-
        Retrieve a specific transaction record by its unique identifier, ensuring it belongs to the specified card.

        This endpoint returns detailed information about a specific card transaction. This information is useful for transaction verification, dispute resolution, and financial reporting.

        The transaction ID is a unique identifier assigned to each transaction record in the system. The endpoint verifies that the requested transaction belongs to the specified card before returning the data.
      operationId: getTransaction
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: Unique identifier of the transaction record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionDTO'
        '404':
          description: Card transaction not found
    put:
      tags:
        - Card Transactions
      summary: Update Card Transaction
      description: |-
        Update an existing transaction record associated with the specified card.

        This endpoint allows modification of transaction attributes such as description, category, and status. Core transaction details like amount, date, and merchant information should generally only be modified to correct errors, as they may affect financial reporting and reconciliation.

        Updates to transaction records should be carefully audited and may require special permissions depending on the system's security configuration.
      operationId: updateTransaction
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: Unique identifier of the card transaction to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransactionDTO'
        required: true
      responses:
        '200':
          description: Card transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionDTO'
        '404':
          description: Card transaction record not found
    delete:
      tags:
        - Card Transactions
      summary: Delete Card Transaction
      description: |-
        Remove an existing transaction record by its unique identifier.

        This endpoint permanently removes a transaction record from the system. This operation should be used with extreme caution, as it may impact financial reporting, reconciliation, and audit trails.

        In most production environments, transactions should be reversed or voided rather than deleted to maintain a complete financial history. Deletion may require special permissions and should be limited to correcting test data or specific regulatory requirements.
      operationId: deleteTransaction
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: Unique identifier of the transaction record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card transaction record deleted successfully
        '404':
          description: Card transaction record not found
  /api/v1/cards/{cardId}/security/{securityId}:
    get:
      tags:
        - Card Security
      summary: Get Card Security Setting by ID
      description: Retrieve a specific security setting by its unique identifier, ensuring it belongs to the specified card.
      operationId: getSecuritySetting
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: securityId
          in: path
          description: Unique identifier of the security setting
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the security setting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSecurityDTO'
        '404':
          description: Security setting not found
    put:
      tags:
        - Card Security
      summary: Update Card Security Setting
      description: Update an existing security setting associated with the specified card.
      operationId: updateSecuritySetting
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: securityId
          in: path
          description: Unique identifier of the security setting to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardSecurityDTO'
        required: true
      responses:
        '200':
          description: Security setting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSecurityDTO'
        '404':
          description: Security setting not found
    delete:
      tags:
        - Card Security
      summary: Delete Card Security Setting
      description: Remove an existing security setting by its unique identifier.
      operationId: deleteSecuritySetting
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: securityId
          in: path
          description: Unique identifier of the security setting record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Security setting record deleted successfully
        '404':
          description: Security setting not found
  /api/v1/cards/{cardId}/providers/{providerId}:
    get:
      tags:
        - Card Providers
      summary: Get Card Provider by ID
      description: Retrieve a specific card provider record by its unique identifier, ensuring it belongs to the specified card.
      operationId: getProvider
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: providerId
          in: path
          description: Unique identifier of the card provider record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProviderDTO'
        '404':
          description: Card provider record not found
    put:
      tags:
        - Card Providers
      summary: Update Card Provider
      description: Update an existing provider record associated with the specified card.
      operationId: updateProvider
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: providerId
          in: path
          description: Unique identifier of the card provider record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardProviderDTO'
        required: true
      responses:
        '200':
          description: Card provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProviderDTO'
        '404':
          description: Card provider record not found
    delete:
      tags:
        - Card Providers
      summary: Delete Card Provider
      description: Remove an existing provider record from a card by its unique identifier.
      operationId: deleteProvider
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: providerId
          in: path
          description: Unique identifier of the card provider record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card provider record deleted successfully
        '404':
          description: Card provider record not found
  /api/v1/cards/{cardId}/promotions/{promotionId}:
    get:
      tags:
        - Card Promotions
      summary: Get Card Promotion
      description: Retrieve a specific promotion record by its unique identifier.
      operationId: getPromotion
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: promotionId
          in: path
          description: Unique identifier of the promotion record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the promotion record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPromotionDTO'
        '404':
          description: Promotion record not found
    put:
      tags:
        - Card Promotions
      summary: Update Card Promotion
      description: Update an existing promotion record associated with the specified card.
      operationId: updatePromotion
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: promotionId
          in: path
          description: Unique identifier of the promotion record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPromotionDTO'
        required: true
      responses:
        '200':
          description: Promotion record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPromotionDTO'
        '400':
          description: Invalid promotion data provided
        '404':
          description: Promotion record not found
    delete:
      tags:
        - Card Promotions
      summary: Delete Card Promotion
      description: Delete a promotion record by its unique identifier.
      operationId: deletePromotion
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: promotionId
          in: path
          description: Unique identifier of the promotion record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Promotion record deleted successfully
        '404':
          description: Promotion record not found
  /api/v1/cards/{cardId}/physical-cards/{physicalCardId}:
    get:
      tags:
        - Physical Cards
      summary: Get Physical Card by ID
      description: Retrieve a specific physical card record by its unique identifier, ensuring it belongs to the specified card.
      operationId: getPhysicalCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: physicalCardId
          in: path
          description: Unique identifier of the physical card record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the physical card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalCardDTO'
        '404':
          description: Physical card record not found
    put:
      tags:
        - Physical Cards
      summary: Update Physical Card
      description: Update an existing physical card record associated with the specified card.
      operationId: updatePhysicalCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: physicalCardId
          in: path
          description: Unique identifier of the physical card record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalCardDTO'
        required: true
      responses:
        '200':
          description: Physical card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalCardDTO'
        '404':
          description: Physical card record not found
    delete:
      tags:
        - Physical Cards
      summary: Delete Physical Card
      description: Remove an existing physical card record by its unique identifier.
      operationId: deletePhysicalCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: physicalCardId
          in: path
          description: Unique identifier of the physical card record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Physical card record deleted successfully
        '404':
          description: Physical card record not found
  /api/v1/cards/{cardId}/payments/{paymentId}:
    get:
      tags:
        - Card Payments
      summary: Get Card Payment
      description: |-
        Retrieve a specific payment record by its unique identifier.

        This endpoint returns detailed information about a specific payment made to a card account. This information is useful for reconciliation, dispute resolution, and financial reporting.

        The payment ID is a unique identifier assigned to each payment record in the system.
      operationId: getPayment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentId
          in: path
          description: Unique identifier of the payment record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the payment record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPaymentDTO'
        '404':
          description: Payment record not found
    put:
      tags:
        - Card Payments
      summary: Update Card Payment
      description: |-
        Update an existing payment record associated with the specified card.

        This endpoint allows modification of payment attributes such as description, reference numbers, and status. Core payment details like amount and date should generally only be modified to correct errors, as they may affect financial reporting and reconciliation.

        Updates to payment records should be carefully audited and may require special permissions depending on the system's security configuration.
      operationId: updatePayment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentId
          in: path
          description: Unique identifier of the payment record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPaymentDTO'
        required: true
      responses:
        '200':
          description: Payment record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPaymentDTO'
        '400':
          description: Invalid payment data provided
        '404':
          description: Payment record not found
    delete:
      tags:
        - Card Payments
      summary: Delete Card Payment
      description: |-
        Delete a payment record by its unique identifier.

        This endpoint permanently removes a payment record from the system. This operation should be used with extreme caution, as it may impact financial reporting, reconciliation, and audit trails.

        In most production environments, payments should be reversed or voided rather than deleted to maintain a complete financial history. Deletion may require special permissions and should be limited to correcting test data or specific regulatory requirements.
      operationId: deletePayment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: paymentId
          in: path
          description: Unique identifier of the payment record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Payment record deleted successfully
        '404':
          description: Payment record not found
  /api/v1/cards/{cardId}/limits/{limitId}:
    get:
      tags:
        - Card Limits
      summary: Get Card Limit by ID
      description: Retrieve a specific card limit record by its unique identifier, ensuring it belongs to the specified card.
      operationId: getLimit
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the card limit record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardLimitDTO'
        '404':
          description: Card limit not found
    put:
      tags:
        - Card Limits
      summary: Update Card Limit
      description: Update an existing limit record associated with the specified card.
      operationId: updateLimit
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the card limit record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardLimitDTO'
        required: true
      responses:
        '200':
          description: Card limit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardLimitDTO'
        '404':
          description: Card limit record not found
    delete:
      tags:
        - Card Limits
      summary: Delete Card Limit
      description: Remove an existing limit record from a card by its unique identifier.
      operationId: deleteLimit
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: limitId
          in: path
          description: Unique identifier of the card limit record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card limit record deleted successfully
        '404':
          description: Card limit record not found
  /api/v1/cards/{cardId}/interests/{interestId}:
    get:
      tags:
        - Card Interests
      summary: Get Card Interest
      description: Retrieve a specific interest record by its unique identifier.
      operationId: getInterest
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: interestId
          in: path
          description: Unique identifier of the interest record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the interest record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardInterestDTO'
        '404':
          description: Interest record not found
    put:
      tags:
        - Card Interests
      summary: Update Card Interest
      description: Update an existing interest record associated with the specified card.
      operationId: updateInterest
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: interestId
          in: path
          description: Unique identifier of the interest record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardInterestDTO'
        required: true
      responses:
        '200':
          description: Interest record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardInterestDTO'
        '400':
          description: Invalid interest data provided
        '404':
          description: Interest record not found
    delete:
      tags:
        - Card Interests
      summary: Delete Card Interest
      description: Delete an interest record by its unique identifier.
      operationId: deleteInterest
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: interestId
          in: path
          description: Unique identifier of the interest record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Interest record deleted successfully
        '404':
          description: Interest record not found
  /api/v1/cards/{cardId}/enrollments/{enrollmentId}:
    get:
      tags:
        - Card Enrollments
      summary: Get Card Enrollment
      description: Retrieve a specific enrollment record by its unique identifier.
      operationId: getEnrollment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: enrollmentId
          in: path
          description: Unique identifier of the enrollment record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the enrollment record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardEnrollmentDTO'
        '404':
          description: Enrollment record not found
    put:
      tags:
        - Card Enrollments
      summary: Update Card Enrollment
      description: Update an existing enrollment record associated with the specified card.
      operationId: updateEnrollment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: enrollmentId
          in: path
          description: Unique identifier of the enrollment record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardEnrollmentDTO'
        required: true
      responses:
        '200':
          description: Enrollment record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardEnrollmentDTO'
        '400':
          description: Invalid enrollment data provided
        '404':
          description: Enrollment record not found
    delete:
      tags:
        - Card Enrollments
      summary: Delete Card Enrollment
      description: Delete an enrollment record by its unique identifier.
      operationId: deleteEnrollment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: enrollmentId
          in: path
          description: Unique identifier of the enrollment record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Enrollment record deleted successfully
        '404':
          description: Enrollment record not found
  /api/v1/cards/{cardId}/disputes/{disputeId}:
    get:
      tags:
        - Card Disputes
      summary: Get Card Dispute
      description: Retrieve a specific dispute record by its unique identifier.
      operationId: getDispute
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeId
          in: path
          description: Unique identifier of the dispute record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the dispute record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDisputeDTO'
        '404':
          description: Dispute record not found
    put:
      tags:
        - Card Disputes
      summary: Update Card Dispute
      description: Update an existing dispute record associated with the specified card.
      operationId: updateDispute
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeId
          in: path
          description: Unique identifier of the dispute record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDisputeDTO'
        required: true
      responses:
        '200':
          description: Dispute record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDisputeDTO'
        '400':
          description: Invalid dispute data provided
        '404':
          description: Dispute record not found
    delete:
      tags:
        - Card Disputes
      summary: Delete Card Dispute
      description: Delete a dispute record by its unique identifier.
      operationId: deleteDispute
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: disputeId
          in: path
          description: Unique identifier of the dispute record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Dispute record deleted successfully
        '404':
          description: Dispute record not found
  /api/v1/cards/{cardId}/configurations/{configId}:
    get:
      tags:
        - Card Configurations
      summary: Get Card Configuration by ID
      description: Retrieve a specific card configuration record by its unique identifier, ensuring it belongs to the specified card.
      operationId: getConfiguration
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: configId
          in: path
          description: Unique identifier of the card configuration record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardConfigurationDTO'
        '404':
          description: Card configuration not found
    put:
      tags:
        - Card Configurations
      summary: Update Card Configuration
      description: Update an existing configuration record associated with the specified card.
      operationId: updateConfiguration
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: configId
          in: path
          description: Unique identifier of the card configuration record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardConfigurationDTO'
        required: true
      responses:
        '200':
          description: Card configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardConfigurationDTO'
        '404':
          description: Card configuration record not found
    delete:
      tags:
        - Card Configurations
      summary: Delete Card Configuration
      description: Remove an existing card configuration record by its unique identifier.
      operationId: deleteConfiguration
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: configId
          in: path
          description: Unique identifier of the card configuration record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card configuration record deleted successfully
        '404':
          description: Card configuration record not found
  /api/v1/cards/{cardId}/balances/{balanceId}:
    get:
      tags:
        - Card Balances
      summary: Get Card Balance
      description: Retrieve a specific balance record by its unique identifier.
      operationId: getBalance
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: balanceId
          in: path
          description: Unique identifier of the balance record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the balance record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBalanceDTO'
        '404':
          description: Balance record not found
    put:
      tags:
        - Card Balances
      summary: Update Card Balance
      description: Update an existing balance record associated with the specified card.
      operationId: updateBalance
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: balanceId
          in: path
          description: Unique identifier of the balance record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBalanceDTO'
        required: true
      responses:
        '200':
          description: Balance record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBalanceDTO'
        '400':
          description: Invalid balance data provided
        '404':
          description: Balance record not found
    delete:
      tags:
        - Card Balances
      summary: Delete Card Balance
      description: Delete a balance record by its unique identifier.
      operationId: deleteBalance
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: balanceId
          in: path
          description: Unique identifier of the balance record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Balance record deleted successfully
        '404':
          description: Balance record not found
  /api/v1/cards/{cardId}/activities/{activityId}:
    get:
      tags:
        - Card Activities
      summary: Get Card Activity
      description: Retrieve a specific activity record by its unique identifier.
      operationId: getActivity
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: activityId
          in: path
          description: Unique identifier of the activity record
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the activity record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardActivityDTO'
        '404':
          description: Activity record not found
    put:
      tags:
        - Card Activities
      summary: Update Card Activity
      description: Update an existing activity record associated with the specified card.
      operationId: updateActivity
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: activityId
          in: path
          description: Unique identifier of the activity record to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardActivityDTO'
        required: true
      responses:
        '200':
          description: Activity record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardActivityDTO'
        '400':
          description: Invalid activity data provided
        '404':
          description: Activity record not found
    delete:
      tags:
        - Card Activities
      summary: Delete Card Activity
      description: Delete an activity record by its unique identifier.
      operationId: deleteActivity
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: activityId
          in: path
          description: Unique identifier of the activity record to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Activity record deleted successfully
        '404':
          description: Activity record not found
  /api/v1/cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Get Card by ID
      description: |-
        Retrieve an existing card record by its unique identifier.

        ## Description
        This endpoint returns comprehensive information about a card, including its status, associated accounts, limits, and key attributes. It provides all the details needed for card management and transaction processing.

        ## Response Details
        The response includes:
        * Basic card information (masked number, expiration date, status)
        * Associated entities (issuer, network, program)
        * Account details (account ID, party ID)
        * Card limits and restrictions
        * Card features and capabilities

        ## Security Considerations
        Sensitive information like the full card number, CVV, and PIN are masked or excluded from the response for security reasons. The card number is partially masked (e.g., '411111******1111') to allow identification while protecting sensitive data.

        ## Common Use Cases
        * Retrieving card details for display in party portals
        * Checking card status before processing transactions
        * Verifying card limits and restrictions
      operationId: getCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '404':
          description: Card not found
    put:
      tags:
        - Cards
      summary: Update Card
      description: |-
        Update an existing card record by its unique identifier.

        ## Description
        This endpoint allows modification of card attributes such as status, limits, and expiration details. It enables financial institutions to manage card lifecycle events and adjust card parameters based on party needs or risk assessments.

        ## Updatable Fields
        * `cardStatus` - Current status (ACTIVE, INACTIVE, BLOCKED, etc.)
        * `cardHolderName` - Name displayed on the card
        * `dailyLimit` - Maximum daily transaction amount
        * `monthlyLimit` - Maximum monthly transaction amount
        * `creditLimit` - Credit limit (for credit cards)
        * `expirationDate` - Card expiration date (for extensions)
        * `isActive` - Whether the card is active
        * `isLocked` - Whether the card is temporarily locked

        ## Immutable Fields
        Note that certain sensitive fields and core attributes cannot be modified after card creation:
        * Card number
        * BIN
        * Card type
        * Card network
        * Issuer

        For changes to these immutable attributes, a new card must be issued.

        ## Common Use Cases
        * Activating a newly issued card
        * Blocking a card due to suspected fraud
        * Adjusting card limits based on party request
        * Updating cardholder information
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDTO'
        required: true
      responses:
        '200':
          description: Card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '404':
          description: Card not found
    delete:
      tags:
        - Cards
      summary: Delete Card
      description: |-
        Remove an existing card record by its unique identifier.

        ## Description
        This endpoint permanently removes a card from the system. It completely erases the card record and all its associated data from the database.

        ## Warning
        ⚠️ **This operation should be used with extreme caution!**

        Deleting a card has several important implications:
        * All transaction history associated with the card will be orphaned
        * Audit trails will be incomplete
        * Regulatory compliance may be compromised
        * Customer service inquiries about the card cannot be addressed

        ## Recommended Alternative
        In most production scenarios, cards should be **deactivated** or **blocked** rather than deleted. This preserves the card record and its history while preventing any new transactions.

        ## Appropriate Use Cases
        Card deletion should be limited to:
        * Test cards in non-production environments
        * Cards created in error that have never been activated
        * Specific regulatory requirements that mandate complete removal

        ## Required Permissions
        This operation typically requires elevated administrative privileges.
      operationId: deleteCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card deleted successfully
        '404':
          description: Card not found
  /api/v1/bins/{binId}:
    get:
      tags:
        - BINs
      summary: Get BIN by ID
      description: |-
        Retrieve a specific Bank Identification Number (BIN) record by its unique identifier.

        ## Description
        This endpoint returns detailed information about a BIN, including its associated issuer, card network, and card type. This information is essential for card issuance and transaction processing.

        ## Response Details
        The response includes comprehensive information about the requested BIN:
        * BIN number and length
        * Associated issuer details
        * Card network information
        * Card type specifications
        * Geographic and currency information
        * Activation status and description

        ## Path Parameters
        * `binId` - The unique identifier of the BIN record in the system

        ## Common Use Cases
        * Retrieving BIN details before card issuance
        * Verifying BIN configuration during system setup
        * Checking BIN status during transaction processing
      operationId: getBIN
      parameters:
        - name: binId
          in: path
          description: Unique identifier of the BIN
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the BIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BINDTO'
        '404':
          description: BIN not found
    put:
      tags:
        - BINs
      summary: Update BIN
      description: |-
        Update an existing Bank Identification Number (BIN) record by its unique identifier.

        ## Description
        This endpoint allows modification of BIN attributes such as associated card type, network, country code, currency code, and activation status.

        ## Updatable Fields
        * `cardTypeId` - Type of card issued under this BIN
        * `cardNetworkId` - Card network associated with this BIN
        * `countryCode` - ISO country code for the BIN
        * `currencyCode` - ISO currency code for cards issued under this BIN
        * `isActive` - Whether the BIN is active
        * `description` - Additional information about the BIN

        ## Important Note
        ⚠️ The BIN number itself should typically not be changed as it is a standardized identifier assigned by card networks. Changing the BIN number could cause transaction routing issues and affect existing cards issued with this BIN.

        ## Path Parameters
        * `binId` - The unique identifier of the BIN record to update

        ## Common Use Cases
        * Updating BIN status (activating or deactivating)
        * Modifying currency or country information
        * Updating card type or network associations
      operationId: updateBIN
      parameters:
        - name: binId
          in: path
          description: Unique identifier of the BIN to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BINDTO'
        required: true
      responses:
        '200':
          description: BIN updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BINDTO'
        '400':
          description: Invalid BIN data provided
        '404':
          description: BIN not found
    delete:
      tags:
        - BINs
      summary: Delete BIN
      description: |-
        Delete a Bank Identification Number (BIN) record by its unique identifier.

        ## Description
        This endpoint permanently removes a BIN from the system. It completely erases the BIN record from the database.

        ## Warning
        ⚠️ **This operation should be used with extreme caution!**

        Deleting a BIN has several important implications:
        * Cards issued with this BIN may experience transaction routing issues
        * Card issuance processes using this BIN will fail
        * Historical transaction data may become inconsistent

        ## Recommended Alternative
        In most production scenarios, BINs should be **deactivated** rather than deleted if they are no longer in use. This preserves the BIN record for historical purposes while preventing new cards from being issued with this BIN.

        ## Appropriate Use Cases
        BIN deletion should be limited to:
        * Test BINs in non-production environments
        * BINs created in error that have never been used for card issuance
        * BINs that are no longer assigned to your organization by the card network

        ## Path Parameters
        * `binId` - The unique identifier of the BIN record to delete

        ## Required Permissions
        This operation typically requires elevated administrative privileges.
      operationId: deleteBIN
      parameters:
        - name: binId
          in: path
          description: Unique identifier of the BIN to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: BIN deleted successfully
        '404':
          description: BIN not found
  /api/v1/acquirers/{acquirerId}:
    get:
      tags:
        - Card Acquirers
      summary: Get Card Acquirer by ID
      description: |-
        Retrieve a specific card acquirer record by its unique identifier.

        This endpoint returns detailed information about a specific card acquirer, including its configuration, supported card networks, integration details, and settlement information. This information is used when configuring merchant accounts and processing transactions.

        The acquirer ID is a unique identifier assigned to each card acquirer in the system.
      operationId: getAcquirer
      parameters:
        - name: acquirerId
          in: path
          description: Unique identifier of the card acquirer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the card acquirer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAcquirerDTO'
        '404':
          description: Card acquirer not found
    put:
      tags:
        - Card Acquirers
      summary: Update Card Acquirer
      description: |-
        Update an existing card acquirer record by its unique identifier.

        This endpoint allows modification of acquirer attributes such as contact information, supported card networks, settlement details, and integration parameters. The core acquirer identity (name and code) should generally remain stable.

        Updates to acquirer configuration may affect transaction processing and settlement, so changes should be carefully tested before being applied to production environments.
      operationId: updateAcquirer
      parameters:
        - name: acquirerId
          in: path
          description: Unique identifier of the card acquirer to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardAcquirerDTO'
        required: true
      responses:
        '200':
          description: Card acquirer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAcquirerDTO'
        '400':
          description: Invalid card acquirer data provided
        '404':
          description: Card acquirer not found
    delete:
      tags:
        - Card Acquirers
      summary: Delete Card Acquirer
      description: |-
        Delete a card acquirer record by its unique identifier.

        This endpoint permanently removes a card acquirer from the system. This operation should be used with extreme caution, as it may impact transaction processing and settlement for merchants associated with this acquirer.

        Before deletion, ensure that no active merchants are using this acquirer. In most cases, deactivating an acquirer rather than deleting it is the safer approach to maintain historical records.
      operationId: deleteAcquirer
      parameters:
        - name: acquirerId
          in: path
          description: Unique identifier of the card acquirer to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Card acquirer deleted successfully
        '404':
          description: Card acquirer not found
  /api/v1/terminals:
    get:
      tags:
        - Card Terminals
      summary: List Card Terminals
      description: |-
        Retrieve a paginated list of all card terminal records.

        Card terminals are physical devices used by merchants to process card payments. This endpoint returns information about all terminals registered in the system, including their type, model, location, and capabilities.

        The response includes terminal details such as serial number, manufacturer, supported features, and associated merchant information. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllTerminals
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card terminals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card terminal records found
    post:
      tags:
        - Card Terminals
      summary: Create Card Terminal
      description: |-
        Create a new card terminal record.

        This endpoint allows registering a new payment terminal in the system. Terminals are the physical or virtual devices that merchants use to accept card payments from parties.

        Required information includes the terminal reference, serial number, type, model, and associated merchant. Additional details like location, capabilities (contactless, chip, magstripe), and processor information can also be provided.
      operationId: createTerminal
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTerminalDTO'
        required: true
      responses:
        '201':
          description: Card terminal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTerminalDTO'
        '400':
          description: Invalid card terminal data provided
  /api/v1/programs:
    get:
      tags:
        - Card Programs
      summary: List Card Programs
      description: |-
        Retrieve a paginated list of all card program records.

        ## Description
        Card programs define the rules, configurations, and features for a group of cards. They specify parameters such as card limits, supported features, and eligibility criteria. Programs are the templates from which individual cards are created.

        ## Response Details
        The response includes a paginated list of card program records with the following information for each program:
        * Program name, code, and description
        * Associated issuer, BIN, card type, and network
        * Default card design
        * Program validity period (start and end dates)
        * Default limits (daily, monthly, credit)
        * Supported features (contactless, international, ATM, etc.)
        * Activation status

        ## Filtering and Sorting
        This endpoint supports filtering and sorting capabilities through the following parameters:
        * `page` - Page number (zero-based)
        * `size` - Number of items per page
        * `sort` - Sort field and direction (e.g., `programName,asc`)

        ## Common Use Cases
        * Retrieving all active card programs
        * Listing programs for a specific issuer or card type
        * Finding programs with specific features (e.g., international support)
      operationId: getAllPrograms
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card programs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card program records found
    post:
      tags:
        - Card Programs
      summary: Create Card Program
      description: |-
        Create a new card program record.

        ## Description
        Card programs are the foundation for issuing cards to parties. Each program defines the characteristics, limits, and features of cards issued under it. Programs are typically associated with specific issuers, BINs, card types, and networks.

        ## Required Fields
        * `programName` - Name of the card program
        * `programCode` - Unique code for the program
        * `issuerId` - Financial institution issuing cards under this program
        * `binId` - Bank Identification Number for cards in this program
        * `cardTypeId` - Type of cards issued under this program
        * `cardNetworkId` - Card network for this program
        * `startDate` - When the program becomes active

        ## Optional Fields
        * `endDate` - When the program expires
        * `defaultDesignId` - Default card design template
        * `maxCardsPerParty` - Maximum cards allowed per party
        * `defaultDailyLimit` - Default daily transaction limit
        * `defaultMonthlyLimit` - Default monthly transaction limit
        * `defaultCreditLimit` - Default credit limit (for credit cards)
        * `defaultCardValidityYears` - Default card validity period in years
        * Feature flags (supports* fields) - Capabilities of cards in this program

        ## Business Rules
        When creating a card program, consider the following business rules:
        * Programs must have a valid start date (today or in the future)
        * If an end date is specified, it must be after the start date
        * The BIN must match the card type and network specified
        * Default limits should align with regulatory requirements
      operationId: createProgram
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardProgramDTO'
        required: true
      responses:
        '201':
          description: Card program created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProgramDTO'
        '400':
          description: Invalid card program data provided
  /api/v1/networks:
    get:
      tags:
        - Card Networks
      summary: List Card Networks
      description: |-
        Retrieve a paginated list of all card network records.

        Card networks are payment processing organizations (such as Visa, Mastercard, American Express) that facilitate transactions between merchants, acquirers, and card issuers. This endpoint returns information about all supported card networks in the system.

        The response includes network details such as name, code, region coverage, and supported features. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllNetworks
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card networks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card network records found
    post:
      tags:
        - Card Networks
      summary: Create Card Network
      description: |-
        Create a new card network record.

        This endpoint allows adding a new payment network to the system. Card networks are essential for transaction routing and processing. Each network has its own set of rules, fees, and processing capabilities.

        Required information includes the network name, code, and region coverage. Additional details like support contact information and API endpoints can also be provided.
      operationId: createNetwork
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardNetworkDTO'
        required: true
      responses:
        '201':
          description: Card network created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardNetworkDTO'
        '400':
          description: Invalid card network data provided
  /api/v1/merchants:
    get:
      tags:
        - Card Merchants
      summary: List Card Merchants
      description: |-
        Retrieve a paginated list of all card merchant records.

        ## Description
        Card merchants represent businesses that accept card payments. They are essential entities in the payment ecosystem, connecting cardholders with goods and services providers. This endpoint provides a comprehensive view of all merchants in the system.

        ## Response Details
        The response includes a paginated list of merchant records with the following information for each merchant:
        * Merchant identification (ID, reference, name)
        * Business details (legal name, category, type)
        * Contact information (address, phone, email)
        * Payment capabilities (supported networks, payment methods)
        * Risk assessment (risk rating, score, fraud indicators)
        * Settlement information (bank details, frequency)
        * Status and activation details

        ## Filtering and Sorting
        This endpoint supports filtering and sorting capabilities through the following parameters:
        * `page` - Page number (zero-based)
        * `size` - Number of items per page
        * `sort` - Sort field and direction (e.g., `merchantName,asc`)

        ## Common Use Cases
        * Retrieving all active merchants
        * Listing merchants by category or risk rating
        * Finding merchants that support specific payment methods
        * Generating merchant reports for compliance or business analysis
      operationId: getAllMerchants
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card merchants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card merchant records found
    post:
      tags:
        - Card Merchants
      summary: Create Card Merchant
      description: |-
        Create a new card merchant record.

        ## Description
        This endpoint allows adding new merchants to the system. Merchants are essential for transaction processing and reporting. The merchant record includes details about the business, contact information, supported payment methods, and risk assessment data.

        ## Required Fields
        * `merchantReference` - Unique reference code for the merchant
        * `merchantName` - Display name of the merchant
        * `merchantLegalName` - Legal business name
        * `merchantCategoryCode` - Standard MCC (Merchant Category Code)
        * `merchantType` - Type of business (RETAIL, ONLINE, etc.)
        * `merchantStatus` - Current status (ACTIVE, PENDING, etc.)
        * `country` - Country of operation

        ## Optional Fields
        * Contact information (address, phone, email)
        * Business details (tax ID, registration number, website)
        * Payment capabilities (supported networks, payment methods)
        * Risk assessment (risk rating, score)
        * Settlement information (bank details, frequency)

        ## Business Rules
        When creating a merchant, consider the following business rules:
        * Merchant references must be unique across the system
        * Merchant category codes should follow the ISO standard
        * Risk assessment should be performed before activating high-volume merchants
        * Settlement information is required for merchants that will process real transactions
      operationId: createMerchant
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardMerchantDTO'
        required: true
      responses:
        '201':
          description: Card merchant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardMerchantDTO'
        '400':
          description: Invalid card merchant data provided
  /api/v1/issuers:
    get:
      tags:
        - Issuers
      summary: List Issuers
      description: |-
        Retrieve a paginated list of all issuer records.

        Card issuers are financial institutions that issue payment cards to consumers and businesses. This endpoint returns information about all issuers registered in the system.

        The response includes issuer details such as name, code, contact information, supported card types, and regulatory information. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllIssuers
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved issuers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No issuer records found
    post:
      tags:
        - Issuers
      summary: Create Issuer
      description: |-
        Create a new issuer record.

        This endpoint allows adding a new card issuer to the system. Issuers are financial institutions that issue payment cards to consumers and businesses, and are responsible for authorizing transactions and settling payments.

        Required information includes the issuer name, code, and contact details. Additional information like supported card types, BIN ranges, and regulatory information can also be provided.
      operationId: createIssuer
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerDTO'
        required: true
      responses:
        '201':
          description: Issuer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerDTO'
        '400':
          description: Invalid issuer data provided
  /api/v1/gateways:
    get:
      tags:
        - Card Gateways
      summary: List Card Gateways
      description: |-
        Retrieve a paginated list of all card gateway records.

        Card gateways are services that authorize and process card transactions between merchants and payment processors. This endpoint returns information about all payment gateways configured in the system.

        The response includes gateway details such as name, provider, supported features, integration endpoints, and status. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllGateways
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card gateways
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card gateway records found
    post:
      tags:
        - Card Gateways
      summary: Create Card Gateway
      description: |-
        Create a new card gateway record.

        This endpoint allows adding a new payment gateway to the system. Gateways are essential for routing and processing card transactions between merchants, acquirers, and card networks.

        Required information includes the gateway name, provider, integration type, and endpoint URLs. Additional details like authentication credentials, supported features, and configuration parameters can also be provided.
      operationId: createGateway
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardGatewayDTO'
        required: true
      responses:
        '201':
          description: Card gateway created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardGatewayDTO'
        '400':
          description: Invalid card gateway data provided
  /api/v1/cards/{cardId}/virtual-cards:
    get:
      tags:
        - Virtual Cards
      summary: List Virtual Cards
      description: Retrieve a paginated list of all virtual card records associated with the specified card.
      operationId: getAllVirtualCards
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the virtual card records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No virtual cards found for the specified card
    post:
      tags:
        - Virtual Cards
      summary: Create Virtual Card
      description: Create a new virtual card record associated with the specified card.
      operationId: createVirtualCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualCardDTO'
        required: true
      responses:
        '201':
          description: Virtual card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCardDTO'
        '400':
          description: Invalid virtual card data provided
  /api/v1/cards/{cardId}/transactions:
    get:
      tags:
        - Card Transactions
      summary: Filter Card Transactions
      description: |-
        Apply custom filters to retrieve a list of transactions for the specified card.

        This endpoint provides advanced filtering capabilities for card transactions, allowing clients to search for specific transactions based on criteria such as date range, amount range, merchant name, transaction type, and status.

        The filter request can include multiple conditions that are combined using logical AND/OR operations. Results can be sorted and paginated for efficient data retrieval.
      operationId: getAllTransactions_1
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
        - name: filterRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FilterRequestCardTransactionDTO'
      responses:
        '200':
          description: Successfully retrieved filtered card transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No filtered results found for the specified card
    post:
      tags:
        - Card Transactions
      summary: Create Card Transaction
      description: |-
        Create a new transaction record and associate it with the specified card.

        This endpoint allows recording a new transaction for a card. Transactions typically represent purchases, withdrawals, refunds, or other financial activities performed with the card.

        Required information includes the transaction amount, date, merchant details, and transaction type. Additional details like authorization codes, reference numbers, and location data can also be provided.

        Note: This endpoint records transactions that have already been authorized and executed. It does not perform real-time transaction authorization, which is handled by a separate microservice.
      operationId: createTransaction
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransactionDTO'
        required: true
      responses:
        '201':
          description: Card transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionDTO'
        '400':
          description: Invalid transaction data provided
  /api/v1/cards/{cardId}/security:
    get:
      tags:
        - Card Security
      summary: List Card Security Settings
      description: Retrieve a paginated list of security settings for the specified card.
      operationId: getAllSecuritySettings
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card security settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No security settings found for the specified card
    post:
      tags:
        - Card Security
      summary: Create Card Security Setting
      description: Create a new security setting for the specified card.
      operationId: createSecuritySetting
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardSecurityDTO'
        required: true
      responses:
        '201':
          description: Security setting created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSecurityDTO'
        '400':
          description: Invalid security setting data provided
  /api/v1/cards/{cardId}/providers:
    get:
      tags:
        - Card Providers
      summary: List Card Providers
      description: Retrieve a paginated list of provider records associated with the specified card.
      operationId: getAllProviders
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the card provider records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No provider records found for the specified card
    post:
      tags:
        - Card Providers
      summary: Create Card Provider
      description: Create a new provider record and associate it with the specified card.
      operationId: createProvider
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardProviderDTO'
        required: true
      responses:
        '201':
          description: Card provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProviderDTO'
        '400':
          description: Invalid card provider data provided
  /api/v1/cards/{cardId}/promotions:
    get:
      tags:
        - Card Promotions
      summary: List Card Promotions
      description: Retrieve a paginated list of promotion records associated with the specified card.
      operationId: getAllPromotions
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card promotions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No promotion records found for the specified card
    post:
      tags:
        - Card Promotions
      summary: Create Card Promotion
      description: Create a new promotion record for the specified card.
      operationId: createPromotion
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPromotionDTO'
        required: true
      responses:
        '201':
          description: Promotion record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPromotionDTO'
        '400':
          description: Invalid promotion data provided
  /api/v1/cards/{cardId}/physical-cards:
    get:
      tags:
        - Physical Cards
      summary: List Physical Cards
      description: Retrieve a paginated list of all physical card records associated with the specified card.
      operationId: getAllPhysicalCards
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the physical cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No physical cards found for the specified card
    post:
      tags:
        - Physical Cards
      summary: Create Physical Card
      description: Create a new physical card record for the specified card.
      operationId: createPhysicalCard
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalCardDTO'
        required: true
      responses:
        '201':
          description: Physical card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhysicalCardDTO'
        '400':
          description: Invalid physical card data provided
  /api/v1/cards/{cardId}/payments:
    get:
      tags:
        - Card Payments
      summary: List Card Payments
      description: |-
        Retrieve a paginated list of payment records associated with the specified card.

        Card payments represent funds transferred to the card account, such as bill payments, deposits, or transfers from other accounts. This endpoint returns all payment records for a specific card, allowing tracking of incoming funds.

        The response includes payment details such as amount, date, source, reference number, and status. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllPayments
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
      responses:
        '200':
          description: Successfully retrieved card payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No payment records found for the specified card
    post:
      tags:
        - Card Payments
      summary: Create Card Payment
      description: |-
        Create a new payment record for the specified card.

        This endpoint allows recording a payment made to a card account. Payments typically represent incoming funds that increase the available balance on the card.

        Required information includes the payment amount, date, and source. Additional details like reference numbers, descriptions, and payment methods can also be provided.
      operationId: createPayment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPaymentDTO'
        required: true
      responses:
        '201':
          description: Payment record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPaymentDTO'
        '400':
          description: Invalid payment data provided
  /api/v1/cards/{cardId}/limits:
    get:
      tags:
        - Card Limits
      summary: List Card Limits
      description: Retrieve a paginated list of limit records associated with the specified card.
      operationId: getAllLimits
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card limits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No limit records found for the specified card
    post:
      tags:
        - Card Limits
      summary: Create Card Limit
      description: Create a new limit record for the specified card.
      operationId: createLimit
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardLimitDTO'
        required: true
      responses:
        '201':
          description: Card limit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardLimitDTO'
        '400':
          description: Invalid limit data provided
  /api/v1/cards/{cardId}/interests:
    get:
      tags:
        - Card Interests
      summary: List Card Interests
      description: Retrieve a paginated list of interest records associated with the specified card.
      operationId: getAllInterests
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card interests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No interest records found for the specified card
    post:
      tags:
        - Card Interests
      summary: Create Card Interest
      description: Create a new interest record for the specified card.
      operationId: createInterest
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardInterestDTO'
        required: true
      responses:
        '201':
          description: Interest record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardInterestDTO'
        '400':
          description: Invalid interest data provided
  /api/v1/cards/{cardId}/enrollments:
    get:
      tags:
        - Card Enrollments
      summary: List Card Enrollments
      description: Retrieve a paginated list of enrollment records associated with the specified card.
      operationId: getAllEnrollments
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card enrollments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No enrollment records found for the specified card
    post:
      tags:
        - Card Enrollments
      summary: Create Card Enrollment
      description: Create a new enrollment record for the specified card.
      operationId: createEnrollment
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardEnrollmentDTO'
        required: true
      responses:
        '201':
          description: Enrollment record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardEnrollmentDTO'
        '400':
          description: Invalid enrollment data provided
  /api/v1/cards/{cardId}/disputes:
    get:
      tags:
        - Card Disputes
      summary: List Card Disputes
      description: Retrieve a paginated list of dispute records associated with the specified card.
      operationId: getAllDisputes
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card disputes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No dispute records found for the specified card
    post:
      tags:
        - Card Disputes
      summary: Create Card Dispute
      description: Create a new dispute record for the specified card.
      operationId: createDispute
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDisputeDTO'
        required: true
      responses:
        '201':
          description: Dispute record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDisputeDTO'
        '400':
          description: Invalid dispute data provided
  /api/v1/cards/{cardId}/configurations:
    get:
      tags:
        - Card Configurations
      summary: List Card Configurations
      description: Retrieve a paginated list of configuration records associated with the specified card.
      operationId: getAllConfigurations
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved the card configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card configurations found for the specified card
    post:
      tags:
        - Card Configurations
      summary: Create Card Configuration
      description: Create a new configuration record and associate it with the specified card.
      operationId: createConfiguration
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardConfigurationDTO'
        required: true
      responses:
        '201':
          description: Card configuration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardConfigurationDTO'
        '400':
          description: Invalid configuration data provided
  /api/v1/cards/{cardId}/balances:
    get:
      tags:
        - Card Balances
      summary: List Card Balances
      description: Retrieve a paginated list of balance records associated with the specified card.
      operationId: getAllBalances
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No balance records found for the specified card
    post:
      tags:
        - Card Balances
      summary: Create Card Balance
      description: Create a new balance record for the specified card.
      operationId: createBalance
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBalanceDTO'
        required: true
      responses:
        '201':
          description: Balance record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardBalanceDTO'
        '400':
          description: Invalid balance data provided
  /api/v1/cards/{cardId}/activities:
    get:
      tags:
        - Card Activities
      summary: List Card Activities
      description: Retrieve a paginated list of activity records associated with the specified card.
      operationId: getAllActivities
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No activity records found for the specified card
    post:
      tags:
        - Card Activities
      summary: Create Card Activity
      description: Create a new activity record for the specified card.
      operationId: createActivity
      parameters:
        - name: cardId
          in: path
          description: Unique identifier of the card
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardActivityDTO'
        required: true
      responses:
        '201':
          description: Activity record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardActivityDTO'
        '400':
          description: Invalid activity data provided
  /api/v1/cards/filter:
    post:
      tags:
        - Cards
      summary: Filter Cards
      description: Retrieve a paginated list of all bank cards based on filter criteria.
      operationId: filterCards
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestCardDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseCardDTO'
  /api/v1/cards:
    post:
      tags:
        - Cards
      summary: Create Card
      description: |-
        Create a new card record in the banking system.

        ## Description
        This endpoint allows the creation of new payment cards. Cards are the central entity in the system and are associated with specific card programs, issuers, networks, and account holders. The created card can be either physical, virtual, or both, depending on the configuration.

        ## Required Fields
        * `cardTypeId` - Type of card (credit, debit, prepaid)
        * `cardNetworkId` - Card network (Visa, Mastercard, etc.)
        * `issuerId` - Financial institution issuing the card
        * `binId` - Bank Identification Number
        * `partyId` - Account holder identifier
        * `cardHolderName` - Name to appear on the card

        ## Optional Fields
        * `isPhysical` - Whether to issue a physical card
        * `isVirtual` - Whether to issue a virtual card
        * `designId` - Card design template
        * `dailyLimit` - Maximum daily transaction amount
        * `monthlyLimit` - Maximum monthly transaction amount
        * `creditLimit` - Credit limit (for credit cards)

        ## Security Considerations
        Sensitive card data like the full card number, CVV, and PIN are generated securely by the system. These values are stored encrypted and are never returned in full through the API.
      operationId: createCard
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDTO'
        required: true
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Invalid card data provided
  /api/v1/bins:
    get:
      tags:
        - BINs
      summary: Get BIN by Number
      description: |-
        Retrieve a specific Bank Identification Number (BIN) record by its BIN number.

        ## Description
        This endpoint allows looking up BIN information using the actual BIN number (first 6-8 digits of a card), which is useful during transaction processing and card validation workflows.

        ## Query Parameters
        * `number` - The BIN number to search for (e.g., '411111' for a Visa card)

        ## Response Details
        The response includes the same comprehensive BIN information as the 'Get BIN by ID' endpoint, but the lookup is performed using the actual BIN number rather than the internal database identifier.

        ## Common Use Cases
        * Identifying the issuer of a card during transaction processing
        * Determining card type and network during payment validation
        * Verifying card origin during fraud detection processes
        * Routing transactions based on BIN information
      operationId: getAllBINs_1
      parameters:
        - name: paginationRequest
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaginationRequest'
        - name: number
          in: query
          description: BIN number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the BIN
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BINDTO'
                  - $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: BIN not found
    post:
      tags:
        - BINs
      summary: Create BIN
      description: |-
        Create a new Bank Identification Number (BIN) record.

        ## Description
        This endpoint allows financial institutions to register new BINs in the system. The BIN is associated with a specific issuer, card network, and card type, and is used to identify the origin of payment cards.

        ## Required Fields
        * `binNumber` - The BIN digits (typically 6-8 digits)
        * `binLength` - Length of the BIN (6, 8, etc.)
        * `issuerId` - Financial institution that owns this BIN
        * `cardNetworkId` - Card network associated with this BIN
        * `cardTypeId` - Type of card issued under this BIN

        ## Optional Fields
        * `countryCode` - ISO country code for the BIN
        * `currencyCode` - ISO currency code for cards issued under this BIN
        * `isActive` - Whether the BIN is active
        * `description` - Additional information about the BIN

        ## Regulatory Considerations
        BINs are typically assigned by card networks to financial institutions. Before creating a BIN, ensure that your organization has been officially assigned this BIN by the relevant card network. Using unauthorized BINs can lead to transaction routing issues and regulatory violations.
      operationId: createBIN
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BINDTO'
        required: true
      responses:
        '201':
          description: BIN created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BINDTO'
        '400':
          description: Invalid BIN data provided
  /api/v1/acquirers:
    get:
      tags:
        - Card Acquirers
      summary: List Card Acquirers
      description: |-
        Retrieve a paginated list of all card acquirer records.

        Card acquirers are financial institutions that process card payments on behalf of merchants. This endpoint returns information about all acquirers registered in the system.

        The response includes acquirer details such as name, code, region coverage, supported card networks, and integration information. Results can be filtered and sorted using the pagination parameters.
      operationId: getAllAcquirers
      parameters:
        - name: pageNumber
          in: query
          description: The zero-based page number to retrieve.
          required: false
          schema:
            type: string
            description: The zero-based page number to retrieve.
            example: 0
            default: '0'
          example: 0
        - name: pageSize
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: string
            description: The number of items per page.
            example: 10
            default: '10'
          example: 10
        - name: sortBy
          in: query
          description: The field to sort the results by.
          required: false
          schema:
            type: string
            description: The field to sort the results by.
            example: name
          example: name
        - name: sortDirection
          in: query
          description: The direction of sorting, either ASC or DESC.
          required: false
          schema:
            type: string
            description: The direction of sorting, either ASC or DESC.
            example: DESC
            default: DESC
          example: DESC
      responses:
        '200':
          description: Successfully retrieved card acquirers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '404':
          description: No card acquirer records found
    post:
      tags:
        - Card Acquirers
      summary: Create Card Acquirer
      description: |-
        Create a new card acquirer record.

        This endpoint allows adding a new card acquirer to the system. Acquirers are financial institutions that maintain merchant accounts and process card transactions on behalf of merchants.

        Required information includes the acquirer name, code, and region coverage. Additional details like supported card networks, settlement information, and integration parameters can also be provided.
      operationId: createAcquirer
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardAcquirerDTO'
        required: true
      responses:
        '201':
          description: Card acquirer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAcquirerDTO'
        '400':
          description: Invalid card acquirer data provided
components:
  schemas:
    CardTerminalDTO:
      required:
        - isActive
        - isAttended
        - isBiometricSupported
        - isChip
        - isContactless
        - isEmvSupported
        - isFaultDetected
        - isMagstripe
        - isMobile
        - isNfcSupported
        - isP2peSupported
        - isPciCompliant
        - isPhysical
        - isPinSupported
        - isQrSupported
        - isSignatureSupported
        - isTokenizationSupported
        - isUnattended
        - isVirtual
        - terminalName
        - terminalReference
        - terminalSerialNumber
        - terminalStatus
        - terminalType
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        terminalId:
          type: string
          format: uuid
          readOnly: true
        terminalReference:
          maxLength: 100
          minLength: 0
          type: string
        terminalSerialNumber:
          maxLength: 50
          minLength: 0
          type: string
        terminalName:
          maxLength: 100
          minLength: 2
          type: string
        terminalDescription:
          maxLength: 500
          minLength: 0
          type: string
        terminalType:
          maxLength: 50
          minLength: 0
          type: string
        terminalModel:
          maxLength: 100
          minLength: 0
          type: string
        terminalManufacturer:
          maxLength: 100
          minLength: 0
          type: string
        terminalStatus:
          maxLength: 50
          minLength: 0
          type: string
        isActive:
          type: boolean
        activationDate:
          type: string
          format: date-time
        deactivationDate:
          type: string
          format: date-time
        deactivationReason:
          maxLength: 255
          minLength: 0
          type: string
        merchantId:
          type: string
          format: uuid
        merchantName:
          maxLength: 100
          minLength: 0
          type: string
        merchantLocationId:
          maxLength: 50
          minLength: 0
          type: string
        merchantLocationName:
          maxLength: 100
          minLength: 0
          type: string
        addressLine1:
          maxLength: 100
          minLength: 0
          type: string
        addressLine2:
          maxLength: 100
          minLength: 0
          type: string
        city:
          maxLength: 50
          minLength: 0
          type: string
        state:
          maxLength: 50
          minLength: 0
          type: string
        postalCode:
          maxLength: 20
          minLength: 0
          type: string
        country:
          pattern: ^[A-Z]{2}$
          type: string
        geolocation:
          maxLength: 100
          minLength: 0
          type: string
        acquirerId:
          maxLength: 50
          minLength: 0
          type: string
        acquirerName:
          maxLength: 100
          minLength: 0
          type: string
        processorId:
          maxLength: 50
          minLength: 0
          type: string
        processorName:
          maxLength: 100
          minLength: 0
          type: string
        softwareVersion:
          maxLength: 50
          minLength: 0
          type: string
        firmwareVersion:
          maxLength: 50
          minLength: 0
          type: string
        hardwareVersion:
          maxLength: 50
          minLength: 0
          type: string
        lastMaintenanceDate:
          type: string
          format: date-time
        nextMaintenanceDate:
          type: string
          format: date-time
        lastUpdateDate:
          type: string
          format: date-time
        installationDate:
          type: string
          format: date-time
        isPhysical:
          type: boolean
        isVirtual:
          type: boolean
        isMobile:
          type: boolean
        isAttended:
          type: boolean
        isUnattended:
          type: boolean
        isContactless:
          type: boolean
        isChip:
          type: boolean
        isMagstripe:
          type: boolean
        isPinSupported:
          type: boolean
        isSignatureSupported:
          type: boolean
        isBiometricSupported:
          type: boolean
        isNfcSupported:
          type: boolean
        isQrSupported:
          type: boolean
        isEmvSupported:
          type: boolean
        isP2peSupported:
          type: boolean
        isTokenizationSupported:
          type: boolean
        supportedCardNetworks:
          maxLength: 500
          minLength: 0
          type: string
        supportedPaymentMethods:
          maxLength: 500
          minLength: 0
          type: string
        supportedCurrencies:
          maxLength: 500
          minLength: 0
          type: string
        defaultCurrency:
          pattern: ^[A-Z]{3}$
          type: string
        communicationType:
          maxLength: 50
          minLength: 0
          type: string
        connectionType:
          maxLength: 50
          minLength: 0
          type: string
        ipAddress:
          pattern: ^(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::1|::)$
          type: string
        macAddress:
          pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
          type: string
        isPciCompliant:
          type: boolean
        pciComplianceDate:
          type: string
          format: date-time
        pciComplianceExpiry:
          type: string
          format: date-time
        encryptionMethod:
          maxLength: 100
          minLength: 0
          type: string
        keyManagementScheme:
          maxLength: 100
          minLength: 0
          type: string
        lastKeyRotationDate:
          type: string
          format: date-time
        nextKeyRotationDate:
          type: string
          format: date-time
        isFaultDetected:
          type: boolean
        faultCode:
          maxLength: 50
          minLength: 0
          type: string
        faultDescription:
          maxLength: 255
          minLength: 0
          type: string
        faultDetectionDate:
          type: string
          format: date-time
        lastTransactionTimestamp:
          type: string
          format: date-time
        lastTransactionId:
          maxLength: 100
          minLength: 0
          type: string
        lastTransactionStatus:
          maxLength: 50
          minLength: 0
          type: string
        notes:
          maxLength: 1000
          minLength: 0
          type: string
    CardProgramDTO:
      required:
        - binId
        - cardNetworkId
        - cardTypeId
        - countryCode
        - currencyCode
        - isActive
        - issuerId
        - programCode
        - programName
        - requiresActivation
        - requiresPin
        - startDate
        - supportsApplePay
        - supportsAtmWithdrawal
        - supportsContactless
        - supportsGooglePay
        - supportsInternational
        - supportsOnlineTransactions
        - supportsPhysicalCards
        - supportsRecurringPayments
        - supportsSamsungPay
        - supportsVirtualCards
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        programId:
          type: string
          format: uuid
          readOnly: true
        programName:
          maxLength: 100
          minLength: 2
          type: string
        programCode:
          pattern: ^[A-Z0-9_]{2,20}$
          type: string
        issuerId:
          type: string
          format: uuid
        binId:
          type: string
          format: uuid
        cardTypeId:
          type: string
          format: uuid
        cardNetworkId:
          type: string
          format: uuid
        defaultDesignId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isActive:
          type: boolean
        maxCardsPerParty:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
        defaultDailyLimit:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        defaultMonthlyLimit:
          maximum: 9999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        defaultCreditLimit:
          maximum: 99999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        defaultCardValidityYears:
          maximum: 10
          minimum: 1
          type: integer
          format: int32
        supportsPhysicalCards:
          type: boolean
        supportsVirtualCards:
          type: boolean
        supportsContactless:
          type: boolean
        supportsInternational:
          type: boolean
        supportsAtmWithdrawal:
          type: boolean
        supportsOnlineTransactions:
          type: boolean
        supportsRecurringPayments:
          type: boolean
        supportsApplePay:
          type: boolean
        supportsGooglePay:
          type: boolean
        supportsSamsungPay:
          type: boolean
        requiresPin:
          type: boolean
        requiresActivation:
          type: boolean
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        countryCode:
          pattern: ^[A-Z]{2}$
          type: string
        termsAndConditionsUrl:
          type: string
        description:
          type: string
    CardNetworkDTO:
      required:
        - isActive
        - networkCode
        - networkName
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardNetworkId:
          type: string
          format: uuid
          readOnly: true
        networkName:
          maxLength: 100
          minLength: 2
          type: string
        networkCode:
          pattern: ^[A-Z0-9_]{2,20}$
          type: string
        networkLogoUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        supportContact:
          maxLength: 100
          minLength: 0
          type: string
        apiEndpoint:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        apiKey:
          maxLength: 255
          minLength: 0
          type: string
        apiSecret:
          maxLength: 255
          minLength: 0
          type: string
        isActive:
          type: boolean
        description:
          maxLength: 500
          minLength: 0
          type: string
    CardMerchantDTO:
      required:
        - addressLine1
        - city
        - country
        - isActive
        - isBlacklisted
        - isFraudSuspected
        - isHighRisk
        - isInternational
        - isMobile
        - isOnline
        - isPhysical
        - isSettlementEnabled
        - merchantCategoryCode
        - merchantCategoryName
        - merchantLegalName
        - merchantName
        - merchantReference
        - merchantStatus
        - merchantType
        - postalCode
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        merchantId:
          type: string
          format: uuid
          readOnly: true
        merchantReference:
          maxLength: 100
          minLength: 0
          type: string
        merchantName:
          maxLength: 100
          minLength: 2
          type: string
        merchantLegalName:
          maxLength: 150
          minLength: 2
          type: string
        merchantDisplayName:
          maxLength: 100
          minLength: 0
          type: string
        merchantDescription:
          maxLength: 500
          minLength: 0
          type: string
        merchantCategoryCode:
          pattern: ^[0-9]{4}$
          type: string
        merchantCategoryName:
          maxLength: 100
          minLength: 2
          type: string
        merchantType:
          maxLength: 50
          minLength: 0
          type: string
        merchantStatus:
          maxLength: 50
          minLength: 0
          type: string
        isActive:
          type: boolean
        activationDate:
          type: string
          format: date-time
        deactivationDate:
          type: string
          format: date-time
        deactivationReason:
          maxLength: 255
          minLength: 0
          type: string
        taxId:
          maxLength: 50
          minLength: 0
          type: string
        registrationNumber:
          maxLength: 50
          minLength: 0
          type: string
        websiteUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        logoUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        addressLine1:
          maxLength: 100
          minLength: 0
          type: string
        addressLine2:
          maxLength: 100
          minLength: 0
          type: string
        city:
          maxLength: 50
          minLength: 2
          type: string
        state:
          maxLength: 50
          minLength: 0
          type: string
        postalCode:
          maxLength: 20
          minLength: 0
          type: string
        country:
          pattern: ^[A-Z]{2}$
          type: string
        phone:
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        email:
          maxLength: 100
          minLength: 0
          type: string
        contactPersonName:
          maxLength: 100
          minLength: 2
          type: string
        contactPersonTitle:
          maxLength: 100
          minLength: 0
          type: string
        contactPersonPhone:
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        contactPersonEmail:
          maxLength: 100
          minLength: 0
          type: string
        isOnline:
          type: boolean
        isPhysical:
          type: boolean
        isMobile:
          type: boolean
        isInternational:
          type: boolean
        supportedCurrencies:
          maxLength: 500
          minLength: 0
          type: string
        defaultCurrency:
          pattern: ^[A-Z]{3}$
          type: string
        supportedCardNetworks:
          maxLength: 500
          minLength: 0
          type: string
        supportedPaymentMethods:
          maxLength: 500
          minLength: 0
          type: string
        isHighRisk:
          type: boolean
        riskRating:
          maxLength: 50
          minLength: 0
          type: string
        riskScore:
          maximum: 1000
          minimum: 0
          type: integer
          format: int32
        riskAssessmentDate:
          type: string
          format: date-time
        isFraudSuspected:
          type: boolean
        fraudReason:
          maxLength: 255
          minLength: 0
          type: string
        fraudReportDate:
          type: string
          format: date-time
        isBlacklisted:
          type: boolean
        blacklistReason:
          maxLength: 255
          minLength: 0
          type: string
        blacklistDate:
          type: string
          format: date-time
        isSettlementEnabled:
          type: boolean
        settlementFrequency:
          maxLength: 50
          minLength: 0
          type: string
        settlementDay:
          maximum: 31
          minimum: 1
          type: integer
          format: int32
        settlementBankName:
          maxLength: 100
          minLength: 0
          type: string
        settlementAccountNumber:
          maxLength: 50
          minLength: 0
          type: string
        settlementAccountName:
          maxLength: 100
          minLength: 0
          type: string
        settlementBankCode:
          maxLength: 20
          minLength: 0
          type: string
        settlementCurrency:
          pattern: ^[A-Z]{3}$
          type: string
        acquirerId:
          maxLength: 50
          minLength: 0
          type: string
        acquirerName:
          maxLength: 100
          minLength: 0
          type: string
        processorId:
          maxLength: 50
          minLength: 0
          type: string
        processorName:
          maxLength: 100
          minLength: 0
          type: string
        terminalIds:
          maxLength: 500
          minLength: 0
          type: string
        notes:
          maxLength: 1000
          minLength: 0
          type: string
    IssuerDTO:
      required:
        - countryCode
        - isActive
        - issuerCode
        - issuerName
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        issuerId:
          type: string
          format: uuid
          readOnly: true
        issuerName:
          maxLength: 100
          minLength: 2
          type: string
        issuerCode:
          pattern: ^[A-Z0-9_]{2,20}$
          type: string
        countryCode:
          pattern: ^[A-Z]{2}$
          type: string
        contactEmail:
          maxLength: 100
          minLength: 0
          type: string
        contactPhone:
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        isActive:
          type: boolean
        supportUrl:
          pattern: ^https?://.*
          type: string
        logoUrl:
          pattern: ^https?://.*\.(jpg|jpeg|png|gif|svg)$
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
    CardGatewayDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        gatewayId:
          type: string
          format: uuid
          readOnly: true
        gatewayReference:
          type: string
        gatewayName:
          type: string
        gatewayLegalName:
          type: string
        gatewayCode:
          type: string
        gatewayDescription:
          type: string
        gatewayType:
          type: string
        gatewayStatus:
          type: string
        isActive:
          type: boolean
        activationDate:
          type: string
          format: date-time
        deactivationDate:
          type: string
          format: date-time
        deactivationReason:
          type: string
        taxId:
          type: string
        registrationNumber:
          type: string
        licenseNumber:
          type: string
        licenseExpiryDate:
          type: string
          format: date-time
        websiteUrl:
          type: string
        logoUrl:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phone:
          type: string
        email:
          type: string
        contactPersonName:
          type: string
        contactPersonTitle:
          type: string
        contactPersonPhone:
          type: string
        contactPersonEmail:
          type: string
        supportedCardNetworks:
          type: string
        supportedPaymentMethods:
          type: string
        supportedCurrencies:
          type: string
        defaultCurrency:
          type: string
        supportedCountries:
          type: string
        isInternational:
          type: boolean
        isDomestic:
          type: boolean
        processorId:
          type: string
          format: uuid
        processorName:
          type: string
        acquirerId:
          type: string
          format: uuid
        acquirerName:
          type: string
        apiBaseUrl:
          type: string
        apiVersion:
          type: string
        apiKey:
          type: string
        apiSecret:
          type: string
        apiUsername:
          type: string
        apiPassword:
          type: string
        apiCertificate:
          type: string
        webhookUrl:
          type: string
        webhookSecret:
          type: string
        redirectUrl:
          type: string
        callbackUrl:
          type: string
        hostedPageUrl:
          type: string
        merchantCount:
          type: integer
          format: int32
        transactionVolumeDailyAvg:
          type: integer
          format: int64
        transactionValueDailyAvg:
          type: integer
          format: int64
        processingTimeAvgMs:
          type: integer
          format: int32
        uptimePercentage:
          type: number
          format: double
        lastDowntimeDate:
          type: string
          format: date-time
        lastDowntimeDurationMinutes:
          type: integer
          format: int32
        settlementFrequency:
          type: string
        settlementDelayDays:
          type: integer
          format: int32
        feeStructure:
          type: string
        processingFeePercentage:
          type: number
          format: double
        processingFeeFlat:
          type: number
          format: double
        chargebackFee:
          type: number
          format: double
        refundFee:
          type: number
          format: double
        contractStartDate:
          type: string
          format: date-time
        contractEndDate:
          type: string
          format: date-time
        contractRenewalDate:
          type: string
          format: date-time
        contractStatus:
          type: string
        isPciCompliant:
          type: boolean
        pciComplianceLevel:
          type: string
        pciComplianceDate:
          type: string
          format: date-time
        pciComplianceExpiry:
          type: string
          format: date-time
        supportsTokenization:
          type: boolean
        supports3dSecure:
          type: boolean
        supportsRecurringPayments:
          type: boolean
        supportsSplitPayments:
          type: boolean
        supportsRefunds:
          type: boolean
        supportsPartialRefunds:
          type: boolean
        supportsVoid:
          type: boolean
        supportsCapture:
          type: boolean
        supportsPreAuth:
          type: boolean
        supportsApplePay:
          type: boolean
        supportsGooglePay:
          type: boolean
        supportsSamsungPay:
          type: boolean
        supportsPaypal:
          type: boolean
        integrationType:
          type: string
        integrationComplexity:
          type: string
        integrationDocumentationUrl:
          type: string
        sdkAvailable:
          type: boolean
        sdkPlatforms:
          type: string
        sdkVersion:
          type: string
        sdkDocumentationUrl:
          type: string
        lastAuditDate:
          type: string
          format: date-time
        nextAuditDate:
          type: string
          format: date-time
    VirtualCardDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        virtualCardId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        deviceId:
          type: string
        virtualCardNumber:
          type: string
        virtualCardStatus:
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - CANCELLED
        creationTimestamp:
          type: string
          format: date-time
        updateTimestamp:
          type: string
          format: date-time
    CardTransactionDTO:
      required:
        - cardFraudFlag
        - cardId
        - cardPresentFlag
        - cardTransactionReference
        - cardTransactionTimestamp
        - transactionStatus
        - transactionType
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardTransactionId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        transactionType:
          type: string
          enum:
            - PURCHASE
            - WITHDRAWAL
            - PAYMENT
            - FEE
            - REFUND
        merchantInfo:
          maxLength: 500
          minLength: 0
          type: string
        transactionStatus:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - FAILED
            - REVERSED
        cardAuthCode:
          maxLength: 20
          minLength: 0
          type: string
        cardMerchantCategoryCode:
          pattern: ^[0-9]{4}$
          type: string
        cardMerchantName:
          maxLength: 100
          minLength: 0
          type: string
        cardPosEntryMode:
          maxLength: 50
          minLength: 0
          type: string
        cardTransactionReference:
          maxLength: 100
          minLength: 0
          type: string
        cardTerminalId:
          maxLength: 50
          minLength: 0
          type: string
        cardHolderCountry:
          pattern: ^[A-Z]{2}$
          type: string
        cardPresentFlag:
          type: boolean
        cardTransactionTimestamp:
          type: string
          format: date-time
        cardFraudFlag:
          type: boolean
        cardCurrencyConversionRate:
          maximum: 999.999999
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        cardFeeAmount:
          maximum: 99999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        cardFeeCurrency:
          pattern: ^[A-Z]{3}$
          type: string
        cardInstallmentPlan:
          maxLength: 100
          minLength: 0
          type: string
    CardSecurityDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardSecurityId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        securityFeature:
          type: string
          enum:
            - PIN_ENABLED
            - TWO_FACTOR_AUTH
            - FRAUD_DETECTION_ENABLED
        securityStatus:
          type: boolean
    CardProviderDTO:
      required:
        - providerCode
        - providerName
        - providerType
        - status
        - supports3dSecure
        - supportsApplePay
        - supportsGooglePay
        - supportsPhysicalCards
        - supportsSamsungPay
        - supportsTokenization
        - supportsVirtualCards
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardProviderId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        providerName:
          maxLength: 100
          minLength: 2
          type: string
        providerCode:
          pattern: ^[A-Z0-9_]{2,20}$
          type: string
        providerType:
          maxLength: 50
          minLength: 0
          type: string
        apiBaseUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        apiVersion:
          maxLength: 20
          minLength: 0
          type: string
        apiKey:
          maxLength: 255
          minLength: 0
          type: string
        apiSecret:
          maxLength: 255
          minLength: 0
          type: string
        apiUsername:
          maxLength: 100
          minLength: 0
          type: string
        apiPassword:
          maxLength: 255
          minLength: 0
          type: string
        apiCertificate:
          maxLength: 1000
          minLength: 0
          type: string
        webhookUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        webhookSecret:
          maxLength: 255
          minLength: 0
          type: string
        supportsPhysicalCards:
          type: boolean
        supportsVirtualCards:
          type: boolean
        supportsTokenization:
          type: boolean
        supports3dSecure:
          type: boolean
        supportsApplePay:
          type: boolean
        supportsGooglePay:
          type: boolean
        supportsSamsungPay:
          type: boolean
        contactName:
          maxLength: 100
          minLength: 0
          type: string
        contactEmail:
          maxLength: 100
          minLength: 0
          type: string
        contactPhone:
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        supportUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        supportEmail:
          maxLength: 100
          minLength: 0
          type: string
        supportPhone:
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
        contractStartDate:
          type: string
          format: date-time
        contractEndDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - PENDING
            - SUSPENDED
        lastConnectionDate:
          type: string
          format: date-time
        lastConnectionStatus:
          maxLength: 50
          minLength: 0
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
    CardPromotionDTO:
      required:
        - benefitType
        - endDate
        - isActive
        - isAutoEnrolled
        - isBalanceTransfer
        - isCombinable
        - isFirstTransactionOnly
        - isIntroductoryRate
        - isLimitedTime
        - isNewCardsOnly
        - isOptInRequired
        - isTargeted
        - promotionCode
        - promotionName
        - promotionStatus
        - promotionType
        - startDate
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        promotionId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        programId:
          type: string
          format: uuid
        cardTypeId:
          type: string
          format: uuid
        issuerId:
          type: string
          format: uuid
        promotionCode:
          maxLength: 20
          minLength: 3
          pattern: ^[A-Z0-9_]+$
          type: string
        promotionName:
          maxLength: 100
          minLength: 2
          type: string
        promotionDescription:
          maxLength: 500
          minLength: 0
          type: string
        promotionType:
          maxLength: 50
          minLength: 0
          type: string
        promotionCategory:
          maxLength: 50
          minLength: 0
          type: string
        promotionStatus:
          maxLength: 50
          minLength: 0
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isActive:
          type: boolean
        isLimitedTime:
          type: boolean
        isTargeted:
          type: boolean
        targetCriteria:
          maxLength: 500
          minLength: 0
          type: string
        isOptInRequired:
          type: boolean
        optInChannel:
          maxLength: 50
          minLength: 0
          type: string
        optInUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        isAutoEnrolled:
          type: boolean
        maxEnrollments:
          maximum: 1000000
          minimum: 1
          type: integer
          format: int32
        currentEnrollments:
          minimum: 0
          type: integer
          format: int32
        benefitType:
          maxLength: 50
          minLength: 0
          type: string
        benefitValue:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        benefitPercentage:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        benefitDescription:
          maxLength: 500
          minLength: 0
          type: string
        minimumSpend:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        maximumBenefit:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        merchantCategoryCodes:
          maxLength: 500
          minLength: 0
          type: string
        merchantIds:
          maxLength: 500
          minLength: 0
          type: string
        countryCodes:
          maxLength: 500
          minLength: 0
          type: string
        transactionTypes:
          maxLength: 500
          minLength: 0
          type: string
        channelTypes:
          maxLength: 500
          minLength: 0
          type: string
        isFirstTransactionOnly:
          type: boolean
        isNewCardsOnly:
          type: boolean
        cardAgeMinDays:
          maximum: 3650
          minimum: 0
          type: integer
          format: int32
        cardAgeMaxDays:
          maximum: 3650
          minimum: 0
          type: integer
          format: int32
        isBalanceTransfer:
          type: boolean
        balanceTransferFee:
          maximum: 9999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        balanceTransferFeePercentage:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        balanceTransferMinAmount:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        balanceTransferMaxAmount:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        isIntroductoryRate:
          type: boolean
        introductoryRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        postIntroductoryRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        introductoryPeriodMonths:
          maximum: 60
          minimum: 1
          type: integer
          format: int32
        termsAndConditions:
          maxLength: 2000
          minLength: 0
          type: string
        termsUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        marketingImageUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        marketingDescription:
          maxLength: 1000
          minLength: 0
          type: string
        isCombinable:
          type: boolean
        combinablePromotions:
          maxLength: 500
          minLength: 0
          type: string
        exclusionCriteria:
          maxLength: 1000
          minLength: 0
          type: string
    PhysicalCardDTO:
      required:
        - cardId
        - designId
        - embossedName
        - isChip
        - isContactless
        - isMagstripe
        - manufacturingStatus
        - plasticId
        - shippingAddress
        - shippingCity
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        physicalCardId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        embossedName:
          maxLength: 26
          minLength: 2
          type: string
        plasticId:
          pattern: ^[A-Z0-9]{8,20}$
          type: string
        designId:
          type: string
          format: uuid
        isContactless:
          type: boolean
        isChip:
          type: boolean
        isMagstripe:
          type: boolean
        manufacturingStatus:
          pattern: ^(PENDING|IN_PROGRESS|COMPLETED|FAILED)$
          type: string
        manufacturingDate:
          type: string
          format: date-time
        shippingAddress:
          maxLength: 200
          minLength: 10
          type: string
        shippingCity:
          maxLength: 50
          minLength: 2
          type: string
        shippingState:
          type: string
        shippingCountry:
          type: string
        shippingPostalCode:
          type: string
        shippingMethod:
          type: string
        shippingTrackingNumber:
          type: string
        shippingCarrier:
          type: string
        shipmentDate:
          type: string
          format: date-time
        estimatedDeliveryDate:
          type: string
          format: date-time
        actualDeliveryDate:
          type: string
          format: date-time
        activationMethod:
          type: string
        activationDate:
          type: string
          format: date-time
        isActivated:
          type: boolean
        replacementReason:
          type: string
        previousCardId:
          type: string
          format: uuid
        notes:
          type: string
    CardPaymentDTO:
      required:
        - accountId
        - cardId
        - currencyCode
        - isAutoPayment
        - isFullPayment
        - isMinimumPayment
        - isScheduledPayment
        - partyId
        - paymentAmount
        - paymentChannel
        - paymentMethod
        - paymentReference
        - paymentStatus
        - paymentTimestamp
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        paymentId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        statementId:
          type: string
          format: uuid
        paymentReference:
          maxLength: 50
          minLength: 5
          type: string
        externalReference:
          maxLength: 50
          minLength: 0
          type: string
        paymentAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0.01
          exclusiveMinimum: false
          type: number
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        paymentMethod:
          pattern: ^(BANK_TRANSFER|CREDIT_CARD|DEBIT_CARD|CASH|CHECK|ONLINE)$
          type: string
        paymentChannel:
          pattern: ^(ONLINE|MOBILE|ATM|BRANCH|PHONE|MAIL)$
          type: string
        paymentStatus:
          pattern: ^(PENDING|PROCESSING|COMPLETED|FAILED|CANCELLED|REFUNDED)$
          type: string
        paymentTimestamp:
          type: string
          format: date-time
        postingTimestamp:
          type: string
          format: date-time
        valueDate:
          type: string
          format: date-time
        isAutoPayment:
          type: boolean
        isMinimumPayment:
          type: boolean
        isFullPayment:
          type: boolean
        isScheduledPayment:
          type: boolean
        scheduledDate:
          type: string
          format: date-time
        recurrencePattern:
          maxLength: 100
          minLength: 0
          type: string
        sourceAccountId:
          maxLength: 50
          minLength: 0
          type: string
        sourceAccountType:
          maxLength: 50
          minLength: 0
          type: string
        sourceBankCode:
          maxLength: 20
          minLength: 0
          type: string
        sourceBankName:
          maxLength: 100
          minLength: 0
          type: string
        sourceAccountHolder:
          maxLength: 100
          minLength: 0
          type: string
        paymentProcessor:
          maxLength: 100
          minLength: 0
          type: string
        processorFee:
          maximum: 9999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        processorReference:
          maxLength: 100
          minLength: 0
          type: string
        confirmationCode:
          maxLength: 50
          minLength: 0
          type: string
        failureReason:
          maxLength: 255
          minLength: 0
          type: string
        failureCode:
          maxLength: 50
          minLength: 0
          type: string
        retryCount:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        lastRetryTimestamp:
          type: string
          format: date-time
        nextRetryTimestamp:
          type: string
          format: date-time
        receiptUrl:
          maxLength: 500
          minLength: 0
          pattern: ^https?://.*
          type: string
        notes:
          maxLength: 1000
          minLength: 0
          type: string
    CardLimitDTO:
      required:
        - cardId
        - currentUsage
        - limitAmount
        - limitType
        - resetPeriod
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardLimitId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        limitType:
          type: string
          enum:
            - DAILY_SPENDING
            - MONTHLY_SPENDING
            - ATM_WITHDRAWAL
            - ONLINE_PURCHASE
        limitAmount:
          maximum: 99999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
        currentUsage:
          minimum: 0
          exclusiveMinimum: false
          type: number
        resetPeriod:
          type: string
          enum:
            - DAILY
            - MONTHLY
    CardInterestDTO:
      required:
        - accountId
        - accrualEndDate
        - accrualStartDate
        - annualPercentageRate
        - balanceAmount
        - balanceType
        - calculationMethod
        - cardId
        - currencyCode
        - daysInPeriod
        - daysInYear
        - interestAmount
        - interestName
        - interestRate
        - interestReference
        - interestType
        - isBilled
        - isCharged
        - isGracePeriod
        - isPaid
        - isPromotionalRate
        - isVariableRate
        - isWaived
        - partyId
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        interestId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        statementId:
          type: string
          format: uuid
        programId:
          type: string
          format: uuid
        interestReference:
          maxLength: 100
          minLength: 0
          type: string
        interestType:
          maxLength: 50
          minLength: 0
          type: string
        interestName:
          maxLength: 100
          minLength: 2
          type: string
        interestDescription:
          maxLength: 500
          minLength: 0
          type: string
        interestRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        annualPercentageRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        isVariableRate:
          type: boolean
        baseRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        rateMargin:
          maximum: 100
          exclusiveMaximum: false
          minimum: -100
          exclusiveMinimum: false
          type: number
        rateCap:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        rateFloor:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        rateChangeFrequency:
          maxLength: 50
          minLength: 0
          type: string
        nextRateChangeDate:
          type: string
          format: date-time
        previousRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        rateChangeTimestamp:
          type: string
          format: date-time
        calculationMethod:
          maxLength: 50
          minLength: 0
          type: string
        compoundingFrequency:
          maxLength: 50
          minLength: 0
          type: string
        accrualFrequency:
          maxLength: 50
          minLength: 0
          type: string
        balanceType:
          maxLength: 50
          minLength: 0
          type: string
        balanceAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        interestAmount:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        accruedInterest:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        accrualStartDate:
          type: string
          format: date-time
        accrualEndDate:
          type: string
          format: date-time
        daysInPeriod:
          maximum: 366
          minimum: 1
          type: integer
          format: int32
        daysInYear:
          maximum: 366
          minimum: 365
          type: integer
          format: int32
        isPromotionalRate:
          type: boolean
        promotionId:
          type: string
          format: uuid
        promotionStartDate:
          type: string
          format: date-time
        promotionEndDate:
          type: string
          format: date-time
        postPromotionRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        isGracePeriod:
          type: boolean
        gracePeriodDays:
          maximum: 365
          minimum: 0
          type: integer
          format: int32
        gracePeriodEndDate:
          type: string
          format: date-time
        isCharged:
          type: boolean
        chargeTimestamp:
          type: string
          format: date-time
        postingTimestamp:
          type: string
          format: date-time
        valueDate:
          type: string
          format: date-time
        isWaived:
          type: boolean
        waiverReason:
          maxLength: 255
          minLength: 0
          type: string
        waiverReference:
          maxLength: 100
          minLength: 0
          type: string
        waiverTimestamp:
          type: string
          format: date-time
        waiverAuthorizedBy:
          maxLength: 100
          minLength: 0
          type: string
        isBilled:
          type: boolean
        billingTimestamp:
          type: string
          format: date-time
        isPaid:
          type: boolean
        paymentTimestamp:
          type: string
          format: date-time
        paymentReference:
          maxLength: 100
          minLength: 0
          type: string
    CardEnrollmentDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        enrollmentId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        enrollmentType:
          type: string
        enrollmentReference:
          type: string
        enrollmentStatus:
          type: string
        enrollmentTimestamp:
          type: string
          format: date-time
        enrollmentChannel:
          type: string
        enrollmentSource:
          type: string
        enrollmentAgent:
          type: string
        promotionId:
          type: string
          format: uuid
        programId:
          type: string
          format: uuid
        featureId:
          type: string
          format: uuid
        featureCode:
          type: string
        featureName:
          type: string
        isAutoEnrolled:
          type: boolean
        isOptIn:
          type: boolean
        isOptOut:
          type: boolean
        optInTimestamp:
          type: string
          format: date-time
        optOutTimestamp:
          type: string
          format: date-time
        optOutReason:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isActive:
          type: boolean
        activationTimestamp:
          type: string
          format: date-time
        deactivationTimestamp:
          type: string
          format: date-time
        deactivationReason:
          type: string
        isRecurring:
          type: boolean
        recurrenceFrequency:
          type: string
        nextRecurrenceDate:
          type: string
          format: date-time
        lastRecurrenceDate:
          type: string
          format: date-time
        termsAccepted:
          type: boolean
        termsAcceptedTimestamp:
          type: string
          format: date-time
        termsVersion:
          type: string
        confirmationCode:
          type: string
        confirmationSent:
          type: boolean
        confirmationChannel:
          type: string
        confirmationTimestamp:
          type: string
          format: date-time
        confirmationRecipient:
          type: string
    CardDisputeDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        disputeId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        transactionId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        disputeReference:
          type: string
        providerReference:
          type: string
        networkReference:
          type: string
        disputeReasonCode:
          type: string
        disputeReasonDescription:
          type: string
        disputeStatus:
          type: string
        disputeStage:
          type: string
        disputeAmount:
          type: number
        disputeCurrency:
          type: string
        filingTimestamp:
          type: string
          format: date-time
        responseDueDate:
          type: string
          format: date-time
        resolutionTimestamp:
          type: string
          format: date-time
        resolutionCode:
          type: string
        resolutionDescription:
          type: string
        isCardholderCredited:
          type: boolean
        creditTimestamp:
          type: string
          format: date-time
        creditAmount:
          type: number
        creditCurrency:
          type: string
        isMerchantDebited:
          type: boolean
        debitTimestamp:
          type: string
          format: date-time
        debitAmount:
          type: number
        debitCurrency:
          type: string
        cardholderStatement:
          type: string
        merchantResponse:
          type: string
        evidenceDocuments:
          type: string
        assignedAgentId:
          type: string
          format: uuid
        assignedAgentName:
          type: string
        lastUpdatedTimestamp:
          type: string
          format: date-time
        notes:
          type: string
    CardConfigurationDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardConfigurationId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        programId:
          type: string
          format: uuid
        configKey:
          type: string
        configValue:
          type: string
        configType:
          type: string
        isActive:
          type: boolean
        activationDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        isSystemDefault:
          type: boolean
        isProgramDefault:
          type: boolean
        isPartyConfigurable:
          type: boolean
        allowedValues:
          type: string
        minValue:
          type: string
        maxValue:
          type: string
        description:
          type: string
    CardBalanceDTO:
      required:
        - accountId
        - asOfDate
        - balanceAmount
        - balanceCategory
        - balanceType
        - cardId
        - currencyCode
        - isChargedOff
        - isDelinquent
        - isInCollection
        - isInGracePeriod
        - isPromotionalRate
        - isWrittenOff
        - partyId
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        balanceId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        statementId:
          type: string
          format: uuid
        balanceType:
          pattern: ^(CURRENT|AVAILABLE|PENDING|CREDIT|DEBIT)$
          type: string
        balanceCategory:
          pattern: ^(PURCHASE|CASH_ADVANCE|BALANCE_TRANSFER|FEE|INTEREST)$
          type: string
        balanceDescription:
          maxLength: 500
          minLength: 0
          type: string
        balanceAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: -999999999.99
          exclusiveMinimum: false
          type: number
        availableAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        reservedAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        pendingAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        asOfDate:
          type: string
          format: date-time
        lastTransactionId:
          type: string
          format: uuid
        lastTransactionTimestamp:
          type: string
          format: date-time
        lastPaymentId:
          type: string
          format: uuid
        lastPaymentTimestamp:
          type: string
          format: date-time
        lastStatementId:
          type: string
          format: uuid
        lastStatementDate:
          type: string
          format: date-time
        isPromotionalRate:
          type: boolean
        promotionId:
          type: string
          format: uuid
        promotionEndDate:
          type: string
          format: date-time
        interestRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        annualPercentageRate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        accruedInterest:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        lastInterestAccrualDate:
          type: string
          format: date-time
        nextInterestAccrualDate:
          type: string
          format: date-time
        isInGracePeriod:
          type: boolean
        gracePeriodEndDate:
          type: string
          format: date-time
        minimumPaymentDue:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        minimumPaymentDueDate:
          type: string
          format: date-time
        daysPastDue:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
        isDelinquent:
          type: boolean
        delinquencyStartDate:
          type: string
          format: date-time
        delinquencyDays:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
        delinquencyStage:
          maxLength: 50
          minLength: 0
          type: string
        isChargedOff:
          type: boolean
        chargeOffDate:
          type: string
          format: date-time
        chargeOffAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        isWrittenOff:
          type: boolean
        writeOffDate:
          type: string
          format: date-time
        writeOffAmount:
          maximum: 999999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        isInCollection:
          type: boolean
        collectionStartDate:
          type: string
          format: date-time
        collectionAgencyId:
          maxLength: 50
          minLength: 0
          type: string
        collectionReference:
          maxLength: 100
          minLength: 0
          type: string
        collectionStatus:
          maxLength: 50
          minLength: 0
          type: string
    CardActivityDTO:
      required:
        - accountId
        - activityReference
        - activityTimestamp
        - activityType
        - cardId
        - isAgentInitiated
        - isNotificationSent
        - isPartyInitiated
        - isSuccessful
        - isSystemInitiated
        - partyId
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        activityId:
          type: string
          format: uuid
          readOnly: true
        cardId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        activityReference:
          maxLength: 100
          minLength: 0
          type: string
        activityType:
          maxLength: 50
          minLength: 0
          type: string
        activityCategory:
          maxLength: 50
          minLength: 0
          type: string
        activityDescription:
          maxLength: 500
          minLength: 0
          type: string
        activityTimestamp:
          type: string
          format: date-time
        activityChannel:
          maxLength: 50
          minLength: 0
          type: string
        activitySource:
          maxLength: 50
          minLength: 0
          type: string
        activityStatus:
          maxLength: 50
          minLength: 0
          type: string
        activityResult:
          maxLength: 50
          minLength: 0
          type: string
        activityDetails:
          maxLength: 1000
          minLength: 0
          type: string
        previousValue:
          maxLength: 500
          minLength: 0
          type: string
        newValue:
          maxLength: 500
          minLength: 0
          type: string
        changeReason:
          maxLength: 255
          minLength: 0
          type: string
        changeAuthorizedBy:
          maxLength: 100
          minLength: 0
          type: string
        ipAddress:
          pattern: ^(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::1|::)$
          type: string
        deviceId:
          maxLength: 100
          minLength: 0
          type: string
        deviceType:
          maxLength: 50
          minLength: 0
          type: string
        deviceOs:
          maxLength: 50
          minLength: 0
          type: string
        browserType:
          maxLength: 50
          minLength: 0
          type: string
        userAgent:
          maxLength: 500
          minLength: 0
          type: string
        geolocation:
          maxLength: 100
          minLength: 0
          type: string
        isPartyInitiated:
          type: boolean
        isSystemInitiated:
          type: boolean
        isAgentInitiated:
          type: boolean
        agentId:
          maxLength: 50
          minLength: 0
          type: string
        agentName:
          maxLength: 100
          minLength: 0
          type: string
        isSuccessful:
          type: boolean
        failureReason:
          maxLength: 255
          minLength: 0
          type: string
        failureCode:
          maxLength: 50
          minLength: 0
          type: string
        isNotificationSent:
          type: boolean
        notificationChannel:
          maxLength: 50
          minLength: 0
          type: string
        notificationTimestamp:
          type: string
          format: date-time
        notificationRecipient:
          maxLength: 100
          minLength: 0
          type: string
        relatedEntityType:
          maxLength: 50
          minLength: 0
          type: string
        relatedEntityId:
          type: string
          format: uuid
        notes:
          maxLength: 1000
          minLength: 0
          type: string
    CardDTO:
      required:
        - accountId
        - binId
        - cardHolderId
        - cardHolderName
        - cardNetworkId
        - cardNumber
        - cardStatus
        - cardTypeId
        - currencyCode
        - expirationMonth
        - expirationYear
        - isActive
        - isLocked
        - isPhysical
        - isPrimary
        - isVirtual
        - issuerId
        - partyId
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        cardId:
          type: string
          format: uuid
          readOnly: true
        cardNumber:
          type: string
        maskedCardNumber:
          pattern: ^[0-9*]{13,19}$
          type: string
        cardSequenceNumber:
          pattern: ^[0-9]{1,3}$
          type: string
        binId:
          type: string
          format: uuid
        cardTypeId:
          type: string
          format: uuid
        cardNetworkId:
          type: string
          format: uuid
        issuerId:
          type: string
          format: uuid
        contractId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        cardStatus:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
            - CANCELLED
        cardHolderName:
          maxLength: 100
          minLength: 2
          type: string
        cardHolderId:
          maxLength: 50
          minLength: 5
          type: string
        expirationMonth:
          maximum: 12
          minimum: 1
          type: integer
          format: int32
        expirationYear:
          maximum: 2050
          minimum: 2024
          type: integer
          format: int32
        cvv:
          pattern: ^[0-9]{3,4}$
          type: string
        pin:
          pattern: ^[0-9]{4,8}$
          type: string
        activationDate:
          type: string
          format: date-time
        issuanceDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        lastUsedDate:
          type: string
          format: date-time
        isPhysical:
          type: boolean
        isVirtual:
          type: boolean
        isPrimary:
          type: boolean
        isActive:
          type: boolean
        isLocked:
          type: boolean
        lockReason:
          maxLength: 255
          minLength: 0
          type: string
        dailyLimit:
          maximum: 999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        monthlyLimit:
          maximum: 9999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        creditLimit:
          maximum: 99999999.99
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        availableBalance:
          minimum: 0
          exclusiveMinimum: false
          type: number
          format: double
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        designId:
          type: string
          format: uuid
        notes:
          maxLength: 1000
          minLength: 0
          type: string
    BINDTO:
      required:
        - binLength
        - binNumber
        - cardNetworkId
        - cardTypeId
        - countryCode
        - currencyCode
        - isActive
        - issuerId
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        binId:
          type: string
          format: uuid
          readOnly: true
        binNumber:
          type: string
        binLength:
          maximum: 8
          minimum: 6
          type: integer
          format: int32
        issuerId:
          type: string
          format: uuid
        cardNetworkId:
          type: string
          format: uuid
        cardTypeId:
          type: string
          format: uuid
        countryCode:
          pattern: ^[A-Z]{2}$
          type: string
        currencyCode:
          pattern: ^[A-Z]{3}$
          type: string
        isActive:
          type: boolean
        description:
          maxLength: 500
          minLength: 0
          type: string
    CardAcquirerDTO:
      type: object
      properties:
        dateCreated:
          type: string
          format: date-time
          readOnly: true
        dateUpdated:
          type: string
          format: date-time
          readOnly: true
        acquirerId:
          type: string
          format: uuid
          readOnly: true
        acquirerReference:
          type: string
        acquirerName:
          type: string
        acquirerLegalName:
          type: string
        acquirerCode:
          type: string
        acquirerDescription:
          type: string
        acquirerType:
          type: string
        acquirerStatus:
          type: string
        isActive:
          type: boolean
        activationDate:
          type: string
          format: date-time
        deactivationDate:
          type: string
          format: date-time
        deactivationReason:
          type: string
        taxId:
          type: string
        registrationNumber:
          type: string
        licenseNumber:
          type: string
        licenseExpiryDate:
          type: string
          format: date-time
        websiteUrl:
          type: string
        logoUrl:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phone:
          type: string
        email:
          type: string
        contactPersonName:
          type: string
        contactPersonTitle:
          type: string
        contactPersonPhone:
          type: string
        contactPersonEmail:
          type: string
        supportedCardNetworks:
          type: string
        supportedPaymentMethods:
          type: string
        supportedCurrencies:
          type: string
        defaultCurrency:
          type: string
        supportedCountries:
          type: string
        isInternational:
          type: boolean
        isDomestic:
          type: boolean
        isOnline:
          type: boolean
        isPhysical:
          type: boolean
        isMobile:
          type: boolean
        processorId:
          type: string
          format: uuid
        processorName:
          type: string
        gatewayId:
          type: string
          format: uuid
        gatewayName:
          type: string
        apiBaseUrl:
          type: string
        apiVersion:
          type: string
        apiKey:
          type: string
        apiSecret:
          type: string
        apiUsername:
          type: string
        apiPassword:
          type: string
        apiCertificate:
          type: string
        webhookUrl:
          type: string
        webhookSecret:
          type: string
        merchantCount:
          type: integer
          format: int32
        terminalCount:
          type: integer
          format: int32
        transactionVolumeDailyAvg:
          type: integer
          format: int64
        transactionValueDailyAvg:
          type: integer
          format: int64
        settlementFrequency:
          type: string
        settlementDelayDays:
          type: integer
          format: int32
        feeStructure:
          type: string
        interchangeFeePercentage:
          type: number
          format: double
        processingFeePercentage:
          type: number
          format: double
        processingFeeFlat:
          type: number
          format: double
        chargebackFee:
          type: number
          format: double
        refundFee:
          type: number
          format: double
        contractStartDate:
          type: string
          format: date-time
        contractEndDate:
          type: string
          format: date-time
        contractRenewalDate:
          type: string
          format: date-time
        contractStatus:
          type: string
        isPciCompliant:
          type: boolean
        pciComplianceDate:
          type: string
          format: date-time
        pciComplianceExpiry:
          type: string
          format: date-time
        isEmvCompliant:
          type: boolean
        emvComplianceDate:
          type: string
          format: date-time
        lastAuditDate:
          type: string
          format: date-time
        nextAuditDate:
          type: string
          format: date-time
    FilterOptions:
      type: object
      properties:
        caseInsensitiveStrings:
          type: boolean
        includeInheritedFields:
          type: boolean
      description: Filter options for customizing filter behavior
    FilterRequestCardDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/CardDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    PaginationRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The zero-based page number to retrieve.
          format: int32
          example: 0
          default: 0
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          example: 10
          default: 10
        sortBy:
          type: string
          description: The field to sort the results by.
          example: name
        sortDirection:
          type: string
          description: The direction of sorting, either ASC or DESC.
          example: DESC
          default: DESC
      description: Represents a pagination request for retrieving paginated results, including page number, size, sort field, and direction.
    RangeFilter:
      type: object
      properties:
        ranges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RangeObject'
          description: Map of field names to their range criteria
      description: Represents range filters for numeric fields
    RangeObject:
      type: object
      properties:
        from:
          type: object
          description: Start value of the range
        to:
          type: object
          description: End value of the range
      description: Represents a range with from and to values
    PaginationResponseCardDTO:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            $ref: '#/components/schemas/CardDTO'
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: The current page number, typically zero-based.
          format: int32
      description: Represents a paginated response containing a list of items and pagination metadata.
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            type: object
            description: The list of items for the current page.
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: The current page number, typically zero-based.
          format: int32
      description: Represents a paginated response containing a list of items and pagination metadata.
    FilterRequestCardTransactionDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/CardTransactionDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination